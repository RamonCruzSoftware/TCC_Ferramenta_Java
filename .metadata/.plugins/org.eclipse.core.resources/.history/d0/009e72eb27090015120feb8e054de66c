package suport.util.database.mongoDB.dao;

import jade.util.leap.HashSet;

import java.awt.Cursor;
import java.net.Socket;
import java.util.ArrayList;
import java.util.Currency;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import core.agents.ConversationsID;
import suport.financial.partternsCandleStick.CandleStick;
import suport.financial.wallet.Stock;
import suport.util.database.mongoDB.MongoConnection;

import com.mongodb.BasicDBObject;
import com.mongodb.DB;
import com.mongodb.DBCollection;
import com.mongodb.DBCursor;
import com.mongodb.DBObject;
import com.mongodb.MongoException;

public class StockDao {

	private DBCollection collection_stock_prices;
	private DBCollection collection_stocks;
	private DBCollection collection_userStockSugestions;

	public StockDao() {
		super();
		try {
			MongoConnection connection = MongoConnection.getInstance();
			DB db = connection.getDB();
			this.setCollection_stock_prices(db.getCollection("JADE_stocks_prices"));
			this.setCollection_stocks(db.getCollection("JADE_stocks"));
			this.setCollection_userStockSugestions(db.getCollection("stock"));

		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public ArrayList<Stock> getStocksSuggestion(String userIdentifier) {
		try {
			BasicDBObject where = new BasicDBObject("userId", userIdentifier);
			DBCursor cursor = collection_userStockSugestions.find(where);
			DBObject mongo_stock = null;
			ArrayList<Stock> stockList = new ArrayList<Stock>();

			Stock stock = null;

			while (cursor.hasNext()) {
				mongo_stock = cursor.next();
				stock = new Stock(mongo_stock.get("codeName").toString(),
						mongo_stock.get("sector").toString());

				stock.setAvarangeReturn_15(Double.parseDouble(mongo_stock.get(
						"avarangeReturn_15").toString()));
				stock.setAvarangeReturn_30(Double.parseDouble(mongo_stock.get(
						"avarangeReturn_30").toString()));

				stock.setStandardDeviation_15(Double.parseDouble(mongo_stock
						.get("standardDeviation_15").toString()));
				stock.setStandardDeviation_30(Double.parseDouble(mongo_stock
						.get("standardDeviation_30").toString()));

				stock.setVariance_15(Double.parseDouble(mongo_stock.get(
						"variance_15").toString()));
				stock.setVariance_30(Double.parseDouble(mongo_stock.get(
						"variance_30").toString()));

				stock.setVarianceCoefficient_15(Double.parseDouble(mongo_stock
						.get("varianceCoefficient_15").toString()));
				stock.setVarianceCoefficient_30(Double.parseDouble(mongo_stock
						.get("varianceCoefficient_30").toString()));

				stockList.add(stock);
			}
			cursor.close();
			return stockList;

		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}

	}

	public boolean dropStockSuggestions(String userIdentifier) {
		boolean result = false;
		try {
			BasicDBObject where = new BasicDBObject("userId", userIdentifier);
			DBCursor cursor = collection_userStockSugestions.find(where);

			while (cursor.hasNext()) {
				collection_userStockSugestions.remove((BasicDBObject) cursor
						.next());
			}
			result = true;
			cursor.close();
		} catch (Exception e) {
			e.printStackTrace();
			result = false;

		}
		return result;
	}

	// as sugestoes sao vistas pelos usuarios atraves do Grails
	public boolean insertStocksSuggestion(Stock stock, String userIdentifier) {

		try {
			BasicDBObject where = new BasicDBObject("codeName",
					stock.getCodeName()).append("userId", userIdentifier);
			DBCursor cursor = getCollection_userStockSugestions().find(where);
			BasicDBObject suggestion = null;
			if (cursor.count() == 0) {

				suggestion = new BasicDBObject()
						.append("codeName", stock.getCodeName())
						.append("sector", stock.getSector())
						.append("avarangeReturn_15",
								stock.getAvarangeReturn_15())
						.append("avarangeReturn_30",
								stock.getAvarangeReturn_30())
						.append("standardDeviation_15",
								stock.getStandardDeviation_15())
						.append("standardDeviation_30",
								stock.getStandardDeviation_30())
						.append("varianceCoefficient_15",
								stock.getVarianceCoefficient_15())
						.append("varianceCoefficient_30",
								stock.getVarianceCoefficient_30())
						.append("variance_15", stock.getVariance_15())
						.append("variance_30", stock.getVariance_30())
						.append("userId", userIdentifier)
						.append("suggestion", stock.getSuggestion())
						.append("qtd", stock.getQtd())
						.append("currentPrice", stock.getCurrentPrice());

				getCollection_userStockSugestions().insert(suggestion);
				cursor.close();

				return true;
			} else
				return false;

		} catch (MongoException.DuplicateKey e) {
			return false;
		}

	}

	
	public ArrayList<Stock> getStocksSuggestionWithUserAuthorized(
			String userIdentifier) {

		try {
			BasicDBObject where = new BasicDBObject("userId", userIdentifier);
			DBCursor cursor = getCollection_userStockSugestions().find(where);

			DBObject mongo_stock = null;
			ArrayList<Stock> stockList = new ArrayList<Stock>();

			while (cursor.hasNext()) {
				mongo_stock = cursor.next();
				// Stock stock=new Stock(mongo_stock.get("_id").toString(),
				// mongo_stock.get("sector").toString());
				Stock stock = new Stock(mongo_stock.get("_id").toString(),"FAKE");
				stock.setSuggestion(Integer.parseInt(mongo_stock.get("suggestion").toString()));
				
				stock.setAvarangeReturn_15(Double.parseDouble(mongo_stock.get("avarangeReturn_15").toString()));
				stock.setAvarangeReturn_30(Double.parseDouble(mongo_stock.get("avarangeReturn_30").toString()));

				stock.setStandardDeviation_15(Double.parseDouble(mongo_stock.get("standardDeviation_15").toString()));
				stock.setStandardDeviation_30(Double.parseDouble(mongo_stock.get("standardDeviation_30").toString()));

				stock.setVariance_15(Double.parseDouble(mongo_stock.get("variance_15").toString()));
				stock.setVariance_30(Double.parseDouble(mongo_stock.get("variance_30").toString()));

				stock.setVarianceCoefficient_15(Double.parseDouble(mongo_stock.get("varianceCoefficient_15").toString()));
				stock.setVarianceCoefficient_30(Double.parseDouble(mongo_stock.get("varianceCoefficient_30").toString()));
				/*
				 * 
						.append("avarangeReturn_15",
								stock.getAvarangeReturn_15())
						.append("avarangeReturn_30",
								stock.getAvarangeReturn_30())
						.append("standardDeviation_15",
								stock.getStandardDeviation_15())
						.append("standardDeviation_30",
								stock.getStandardDeviation_30())
						.append("varianceCoefficient_15",
								stock.getVarianceCoefficient_15())
						.append("varianceCoefficient_30",
								stock.getVarianceCoefficient_30())
						.append("variance_15", stock.getVariance_15())
						.append("variance_30", stock.getVariance_30())
						.append("userId", userIdentifier)
						.append("suggestion", stock.getSuggestion())
						.append("qtd", stock.getQtd())
						.append("currentPrice", stock.getCurrentPrice());
				 */
				switch (stock.getSuggestion()) 
				{
				case ConversationsID.BUY_APPROVED: {
					stockList.add(stock);
				}
					break;

				case ConversationsID.SELL_APPROVED: {
					stockList.add(stock);
				}
					break;

				default:
					break;
				}

			}
			cursor.close();
			return stockList;
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}

	}

	public boolean updateStock(Stock stock) {
		boolean result = false;
		try {
			BasicDBObject where = new BasicDBObject("_id", stock.getCodeName());
			// BasicDBObject whereValues= new
			// BasicDBObject("stockCodeName",stock.getCodeName());
			// DBObject stockValues=null;
			DBObject stocks = null;

			// ArrayList<BasicDBObject> candleSticksList=new
			// ArrayList<BasicDBObject>();

			DBCursor cursorStock = getCollection_stocks().find(where);
			// DBCursor
			// cursorStockPrices=getCollection_stock_prices().find(whereValues);

			while (cursorStock.hasNext()) {
				stocks = cursorStock.next();

			}
			// while(cursorStockPrices.hasNext())
			// {
			// stockValues=cursorStockPrices.next();
			//
			// }

			// //Convertendo informacoes
			// for(CandleStick c:stock.getCandleSticks())
			// {
			// candleSticksList.add(new
			// BasicDBObject("date",stock.getCurrentCandleStick().getDate()).
			// append("open",stock.getCurrentCandleStick().getOpen()).
			// append("high",stock.getCurrentCandleStick().getHigh()).
			// append("low", stock.getCurrentCandleStick().getLow()).
			// append("close", stock.getCurrentCandleStick().getClose()).
			// append("volume", stock.getCurrentCandleStick().getVolume()));
			// }
			//
			// BasicDBObject updateStockPrices = new
			// BasicDBObject("_id",stock.getCodeName()).
			// append("values", candleSticksList);

			BasicDBObject updateStock = new BasicDBObject("_id",
					stock.getCodeName())
					.append("sector", stock.getSector())
					.append("avarangeReturn_15", stock.getAvarangeReturn_15())
					.append("standardDeviation_15",
							stock.getStandardDeviation_15())
					.append("variance_15", stock.getVariance_15())
					.append("varianceCoefficient_15",
							stock.getVarianceCoefficient_15())
					.append("avarangeReturn_30", stock.getAvarangeReturn_30())
					.append("standardDeviation_30",
							stock.getStandardDeviation_30())
					.append("variance_30", stock.getVariance_30())
					.append("varianceCoefficient_30",
							stock.getVarianceCoefficient_30())
					.append("suggestion", stock.getSuggestion())
					// TODO Atencao nessa linha
					.append("qtd", stock.getQtd())
					.append("currentPrice", stock.getCurrentPrice());

			getCollection_stocks().remove(stocks);

			// getCollection_stock_prices().remove(stockValues);

			getCollection_stocks().insert(updateStock);
			// getCollection_stock_prices().insert(updateStockPrices);
			result = true;

			cursorStock.close();
			// cursorStockPrices.close();

		} catch (Exception e) {
			e.printStackTrace();
			result = false;
		}

		return result;

	}

	public boolean insertCurrentStock(Stock stock) {

		BasicDBObject isCurrent = new BasicDBObject("stockCodeName",
				stock.getCodeName()).append("date", stock
				.getCurrentCandleStick().getDate());

		DBCursor cursor_isCurrent = null;
		try {
			cursor_isCurrent = getCollection_stock_prices().find(isCurrent);
			int count = 0;
			while (cursor_isCurrent.hasNext()) {
				count++;
			}
			if (count > 0) {
				cursor_isCurrent.close();
				return false;
			} else {
				CandleStick c = stock.getCurrentCandleStick();
				getCollection_stock_prices().save(
						new BasicDBObject("stockCodeName", stock.getCodeName())
								.append("date", c.getDate())
								.append("open", c.getOpen())
								.append("high", c.getHigh())
								.append("low", c.getLow())
								.append("close", c.getClose())
								.append("volume", c.getVolume()));
				return true;

			}
		} catch (Exception e) {
			e.printStackTrace();
			cursor_isCurrent.close();
			return false;

		}

	}

	public boolean storeHistoricalStockValue(Stock stock) {

		ArrayList<CandleStick> candleListAux = stock.getCandleSticks();
		
		try {
			collection_stocks
					.save(new BasicDBObject("_id", stock.getCodeName()).append(
							"sector", stock.getSector()));

			for (CandleStick c : candleListAux) {

				collection_stock_prices.save(new BasicDBObject("_id",stock.getCodeName()+"+"+c.getDate().toString()).
						append("stockCodeName",stock.getCodeName()).
						append("date", c.getDate())
						.append("open", c.getOpen())
						.append("high", c.getHigh()).append("low", c.getLow())
						.append("close", c.getClose())
						.append("volume", c.getVolume()));

			}

			return true;

		} catch (MongoException.DuplicateKey e) {
			return false;
		}

	}

	public Stock getStock(String codeName) {

		try {
			BasicDBObject where = new BasicDBObject("_id", codeName);
			DBCursor cursor = collection_stocks.find(where);

			DBObject mongo_stock = null;
			Stock stock = null;

			while (cursor.hasNext()) {

				mongo_stock = cursor.next();
				// stock=new Stock(mongo_stock.get("_id").toString(),
				// mongo_stock.get("sector").toString());
				stock = new Stock(mongo_stock.get("_id").toString(), "FAKE");
				stock.setAvarangeReturn_15(Double.parseDouble(mongo_stock.get(
						"avarangeReturn_15").toString()));
				stock.setAvarangeReturn_30(Double.parseDouble(mongo_stock.get(
						"avarangeReturn_30").toString()));

				stock.setStandardDeviation_15(Double.parseDouble(mongo_stock
						.get("standardDeviation_15").toString()));
				stock.setStandardDeviation_30(Double.parseDouble(mongo_stock
						.get("standardDeviation_30").toString()));

				stock.setVariance_15(Double.parseDouble(mongo_stock.get(
						"variance_15").toString()));
				stock.setVariance_30(Double.parseDouble(mongo_stock.get(
						"variance_30").toString()));

				stock.setVarianceCoefficient_15(Double.parseDouble(mongo_stock
						.get("varianceCoefficient_15").toString()));
				stock.setVarianceCoefficient_30(Double.parseDouble(mongo_stock
						.get("varianceCoefficient_30").toString()));

			}
			cursor.close();
			return stock;
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}

	}

	/**
	 * Get only statistical values of the stocks
	 * 
	 * @return
	 */

	public ArrayList<Stock> getAllStocksWithPrices()
	{
		BasicDBObject wherePrices = null;

		DBCursor cursor = getCollection_stocks().find();
		DBCursor cursorPrices = null;

		DBObject mongo_stock = null;
		BasicDBObject price = null;

		ArrayList<Stock> stockList = new ArrayList<Stock>();
		ArrayList<CandleStick> candleList = null;

		Stock stock = null;

		try
		{
			while (cursor.hasNext()) {

				mongo_stock = cursor.next();
				stock = new Stock(mongo_stock.get("_id").toString(), mongo_stock.get("sector").toString());

				stock.setAvarangeReturn_15(Double.parseDouble(mongo_stock.get("avarangeReturn_15").toString()));
				stock.setAvarangeReturn_30(Double.parseDouble(mongo_stock.get("avarangeReturn_30").toString()));

				stock.setStandardDeviation_15(Double.parseDouble(mongo_stock.get("standardDeviation_15").toString()));
				stock.setStandardDeviation_30(Double.parseDouble(mongo_stock.get("standardDeviation_30").toString()));

				stock.setVariance_15(Double.parseDouble(mongo_stock.get("variance_15").toString()));
				stock.setVariance_30(Double.parseDouble(mongo_stock.get("variance_30").toString()));

				stock.setVarianceCoefficient_15(Double.parseDouble(mongo_stock.get("varianceCoefficient_15").toString()));
				stock.setVarianceCoefficient_30(Double.parseDouble(mongo_stock.get("varianceCoefficient_30").toString()));

				wherePrices = new BasicDBObject("stockCodeName",stock.getCodeName());
				cursorPrices = getCollection_stock_prices().find(wherePrices);
				candleList = new ArrayList<CandleStick>();

				while (cursorPrices.hasNext()) {
					price = (BasicDBObject) cursorPrices.next();

					candleList.add(new CandleStick(price.getDouble("open"), price
							.getDouble("high"), price.getDouble("low"), price
							.getDouble("close"), price.getInt("volume"), price
							.getDate("date")));
				}
				stock.setCandleSticks(candleList);
				stockList.add(stock);

			}
			cursor.close();
		}catch (Exception e)
		{
			e.printStackTrace();
		}
		
		return stockList;
	}
	
public CandleStick getCandleStickOfStockByDate(String codeName,Date date)
{
	BasicDBObject where=null;
	BasicDBObject mongo_candle=null;
	DBCursor cursor=null;
	CandleStick candlestickReturn=null;
	
	System.out.println("1");
	
	where = new BasicDBObject("_id", codeName+"+"+date.toString());
	
	cursor=getCollection_stock_prices().find(where);
	
	System.out.println("2");
	
	
	while(cursor.hasNext())
	{
		System.out.println("3");
		mongo_candle=(BasicDBObject)cursor.next();
		candlestickReturn=new CandleStick(
											mongo_candle.getDouble("open"), mongo_candle.getDouble("high"),
											mongo_candle.getDouble("low"), mongo_candle.getDouble("close"), 
											mongo_candle.getInt("volume"), mongo_candle.getDate("date")
											);
		
		System.out.println("4");
		break;
	}
	cursor.close();
	System.out.println("5");
	return candlestickReturn;
}
//Metodo pesado pra caralho 
public Map<String, ArrayList<Date>> getAllDatesOfPricesBetweenInterval(Date start,Date finish)
{
	
	
	DBCursor cursorStockPrices=null;
	DBCursor cursorStocks= getCollection_stocks().find();
	BasicDBObject whereStocksPrices = null;
	
	BasicDBObject mongoStock=null;
	BasicDBObject mongoCandle=null;
	
	String codeName=null;
	ArrayList<Date> dates=null;
	
	Map<String, ArrayList<Date>> mapReturn=new HashMap<String, ArrayList<Date>>();
	//TODO bug
	while(cursorStocks.hasNext())
	{
		cursorStockPrices=null;
		mongoStock=null;
		codeName=null;
		whereStocksPrices=null;
		dates=null;
		
		mongoStock=(BasicDBObject)cursorStocks.next();
		codeName=mongoStock.getString("_id");
		
		mapReturn.put(codeName, dates);
		
		
	}
	
	for(Entry<String, ArrayList<Date>> stockMap : mapReturn.entrySet())
	{
		whereStocksPrices= new BasicDBObject("stockCodeName",stockMap.getKey()).append("date",new BasicDBObject("$gt",start).append("$lt", finish));
		
		cursorStockPrices=getCollection_stock_prices().find(whereStocksPrices);
		dates= new ArrayList<Date>();
		
		while(cursorStockPrices.hasNext())
		{
			mongoCandle=(BasicDBObject)cursorStockPrices.next();
			dates.add(mongoCandle.getDate("date"));
			
		}
		stockMap.setValue(dates);
		System.out.println("StockDao:"+codeName+" carregado");
	}
	
	cursorStockPrices.close();
	cursorStocks.close();
	
	return mapReturn;
	
	//wherePrices = new BasicDBObject("stockCodeName",stock.getCodeName()).append("date",new BasicDBObject("$gt",start).append("$lt", finish));
}
public ArrayList<Stock> getAllStocksWithPricesBetweenInterval(Date start,Date finish) {
		BasicDBObject wherePrices = null;

		DBCursor cursor = getCollection_stocks().find();
		DBCursor cursorPrices = null;

		DBObject mongo_stock = null;
		BasicDBObject price = null;

		ArrayList<Stock> stockList = new ArrayList<Stock>();
		ArrayList<CandleStick> candleList = null;

		Stock stock = null;

		while (cursor.hasNext()) {

			mongo_stock = cursor.next();
			stock = new Stock(mongo_stock.get("_id").toString(), mongo_stock
					.get("sector").toString());

			stock.setAvarangeReturn_15(Double.parseDouble(mongo_stock.get(
					"avarangeReturn_15").toString()));
			stock.setAvarangeReturn_30(Double.parseDouble(mongo_stock.get(
					"avarangeReturn_30").toString()));

			stock.setStandardDeviation_15(Double.parseDouble(mongo_stock.get(
					"standardDeviation_15").toString()));
			stock.setStandardDeviation_30(Double.parseDouble(mongo_stock.get(
					"standardDeviation_30").toString()));

			stock.setVariance_15(Double.parseDouble(mongo_stock.get(
					"variance_15").toString()));
			stock.setVariance_30(Double.parseDouble(mongo_stock.get(
					"variance_30").toString()));

			stock.setVarianceCoefficient_15(Double.parseDouble(mongo_stock.get(
					"varianceCoefficient_15").toString()));
			stock.setVarianceCoefficient_30(Double.parseDouble(mongo_stock.get(
					"varianceCoefficient_30").toString()));

			wherePrices = new BasicDBObject("stockCodeName",stock.getCodeName()).append("date",new BasicDBObject("$gt",start).append("$lt", finish));
			
			
			cursorPrices = getCollection_stock_prices().find(wherePrices);
			candleList = new ArrayList<CandleStick>();
			
			
			
			while (cursorPrices.hasNext())
			{
				price = (BasicDBObject) cursorPrices.next();
				
				candleList.add(new CandleStick(price.getDouble("open"), price
						.getDouble("high"), price.getDouble("low"), price
						.getDouble("close"), price.getInt("volume"), price
						.getDate("date")));
			
			}
			System.out.println("StocDao: "+stock.getCodeName()+" Carregado");
			stock.setCandleSticks(candleList);
			stockList.add(stock);
			
			
		}
		cursorPrices.close();
		cursor.close();
		
		

		return stockList;
	}

public Stock getStocksWithPricesBetweenInterval(String codeName,Date start,Date finish) {
		BasicDBObject wherePrices = null;

		DBCursor cursor = getCollection_stocks().find(new BasicDBObject("_id", codeName));
		DBCursor cursorPrices = null;

		DBObject mongo_stock = null;
		BasicDBObject price = null;
		ArrayList<CandleStick> candleList = null;

		Stock stock = null;

		while (cursor.hasNext()) {

			mongo_stock = cursor.next();
			stock = new Stock(mongo_stock.get("_id").toString(), mongo_stock
					.get("sector").toString());

			stock.setAvarangeReturn_15(Double.parseDouble(mongo_stock.get(
					"avarangeReturn_15").toString()));
			stock.setAvarangeReturn_30(Double.parseDouble(mongo_stock.get(
					"avarangeReturn_30").toString()));

			stock.setStandardDeviation_15(Double.parseDouble(mongo_stock.get(
					"standardDeviation_15").toString()));
			stock.setStandardDeviation_30(Double.parseDouble(mongo_stock.get(
					"standardDeviation_30").toString()));

			stock.setVariance_15(Double.parseDouble(mongo_stock.get(
					"variance_15").toString()));
			stock.setVariance_30(Double.parseDouble(mongo_stock.get(
					"variance_30").toString()));

			stock.setVarianceCoefficient_15(Double.parseDouble(mongo_stock.get(
					"varianceCoefficient_15").toString()));
			stock.setVarianceCoefficient_30(Double.parseDouble(mongo_stock.get(
					"varianceCoefficient_30").toString()));

			wherePrices = new BasicDBObject("stockCodeName",stock.getCodeName())
							 .append("date",new BasicDBObject("$gt",start).append("$lt", finish));
			
			
			cursorPrices = getCollection_stock_prices().find(wherePrices);
			candleList = new ArrayList<CandleStick>();
			
			
			
			while (cursorPrices.hasNext())
			{
				price = (BasicDBObject) cursorPrices.next();
				
				candleList.add(new CandleStick(price.getDouble("open"), price
						.getDouble("high"), price.getDouble("low"), price
						.getDouble("close"), price.getInt("volume"), price
						.getDate("date")));
			
			}
			stock.setCandleSticks(candleList);
			
			
		}
		cursor.close();
		return stock;
	}


	public ArrayList<Stock> getAllStocks() {

		DBCursor cursor = getCollection_stocks().find();

		DBObject mongo_stock = null;
		ArrayList<Stock> stockList = new ArrayList<Stock>();

		Stock stock = null;

		while (cursor.hasNext()) {

			mongo_stock = cursor.next();
			stock = new Stock(mongo_stock.get("_id").toString(), mongo_stock
					.get("sector").toString());

			stock.setAvarangeReturn_15(Double.parseDouble(mongo_stock.get(
					"avarangeReturn_15").toString()));
			stock.setAvarangeReturn_30(Double.parseDouble(mongo_stock.get(
					"avarangeReturn_30").toString()));

			stock.setStandardDeviation_15(Double.parseDouble(mongo_stock.get(
					"standardDeviation_15").toString()));
			stock.setStandardDeviation_30(Double.parseDouble(mongo_stock.get(
					"standardDeviation_30").toString()));

			stock.setVariance_15(Double.parseDouble(mongo_stock.get(
					"variance_15").toString()));
			stock.setVariance_30(Double.parseDouble(mongo_stock.get(
					"variance_30").toString()));

			stock.setVarianceCoefficient_15(Double.parseDouble(mongo_stock.get(
					"varianceCoefficient_15").toString()));
			stock.setVarianceCoefficient_30(Double.parseDouble(mongo_stock.get(
					"varianceCoefficient_30").toString()));

			stockList.add(stock);

		}
		cursor.close();
		return stockList;

	}

	/**
	 * Get only values of the stocks in dataBase
	 * 
	 * @return
	 */

	public int getStocksPricesCount() {
		return getCollection_stock_prices().find().count();
	}

public ArrayList<CandleStick> getStockPrices_last10(String codeName) {
	
		BasicDBObject where = new BasicDBObject("stockCodeName", codeName);
		DBCursor cursor = getCollection_stock_prices().find(where).limit(10);

		BasicDBObject mongo_stock = null;
		ArrayList<CandleStick> mongo_candleList = null;

		mongo_candleList = new ArrayList<CandleStick>();

		try {
			while (cursor.hasNext()) {
				mongo_stock = (BasicDBObject) cursor.next();

				mongo_candleList
						.add(new CandleStick(mongo_stock.getDouble("open"),
								mongo_stock.getDouble("high"), mongo_stock
										.getDouble("low"), mongo_stock
										.getDouble("close"), mongo_stock
										.getInt("volume"), mongo_stock
										.getDate("date")));

			}

		} catch (Exception e) {
			e.printStackTrace();
			cursor.close();
		}

		cursor.close();
		return mongo_candleList;
	}

	public ArrayList<CandleStick> getStockPrices_last30(String codeName) {
		BasicDBObject where = new BasicDBObject("stockCodeName", codeName);
		DBCursor cursor = getCollection_stock_prices().find(where).limit(30);

		BasicDBObject mongo_stock = null;
		ArrayList<CandleStick> mongo_candleList = null;

		mongo_candleList = new ArrayList<CandleStick>();

		try {
			while (cursor.hasNext()) {
				mongo_stock = (BasicDBObject) cursor.next();

				mongo_candleList
						.add(new CandleStick(mongo_stock.getDouble("open"),
								mongo_stock.getDouble("high"), mongo_stock
										.getDouble("low"), mongo_stock
										.getDouble("close"), mongo_stock
										.getInt("volume"), mongo_stock
										.getDate("date")));

			}

		} catch (Exception e) {
			e.printStackTrace();
			cursor.close();
		}

		cursor.close();
		return mongo_candleList;

	}

	public ArrayList<CandleStick> getStockPrices_last40(String codeName) {
		BasicDBObject where = new BasicDBObject("stockCodeName", codeName);
		DBCursor cursor = getCollection_stock_prices().find(where).limit(40);

		BasicDBObject mongo_stock = null;
		ArrayList<CandleStick> mongo_candleList = null;

		mongo_candleList = new ArrayList<CandleStick>();

		try {
			while (cursor.hasNext()) {
				mongo_stock = (BasicDBObject) cursor.next();

				mongo_candleList
						.add(new CandleStick(mongo_stock.getDouble("open"),
								mongo_stock.getDouble("high"), mongo_stock
										.getDouble("low"), mongo_stock
										.getDouble("close"), mongo_stock
										.getInt("volume"), mongo_stock
										.getDate("date")));

			}

		} catch (Exception e) {
			e.printStackTrace();
			cursor.close();
		}

		cursor.close();
		return mongo_candleList;
	}

	public ArrayList<Stock> getStockOrderByStandardDeviation_30(
			double lowerLimit, double upperLimit) {
		BasicDBObject sort = new BasicDBObject("standardDeviation_30", 1);
		BasicDBObject find_1 = new BasicDBObject("$gt", lowerLimit).append(
				"$lt", upperLimit);
		BasicDBObject find_2 = new BasicDBObject("standardDeviation_30", find_1);

		DBCursor cursor = getCollection_stocks().find(find_2).sort(sort);

		DBObject mongo_stock = null;
		ArrayList<Stock> stockList = new ArrayList<Stock>();
		Stock stock = null;

		try {
			while (cursor.hasNext()) {

				mongo_stock = cursor.next();
				stock = new Stock(mongo_stock.get("_id").toString(), null);

				stock.setAvarangeReturn_15(Double.parseDouble(mongo_stock.get(
						"avarangeReturn_15").toString()));
				stock.setAvarangeReturn_30(Double.parseDouble(mongo_stock.get(
						"avarangeReturn_30").toString()));

				stock.setStandardDeviation_15(Double.parseDouble(mongo_stock
						.get("standardDeviation_15").toString()));
				stock.setStandardDeviation_30(Double.parseDouble(mongo_stock
						.get("standardDeviation_30").toString()));

				stock.setVariance_15(Double.parseDouble(mongo_stock.get(
						"variance_15").toString()));
				stock.setVariance_30(Double.parseDouble(mongo_stock.get(
						"variance_30").toString()));

				stock.setVarianceCoefficient_15(Double.parseDouble(mongo_stock
						.get("varianceCoefficient_15").toString()));
				stock.setVarianceCoefficient_30(Double.parseDouble(mongo_stock
						.get("varianceCoefficient_30").toString()));

				
				if(stockList.size()>0)
				{
					boolean exists=false;
					String codeName=stock.getCodeName();
					for(Stock s:stockList)
					{
						if(s.getCodeName().equalsIgnoreCase(codeName)) exists=true;
					}
					if(!exists)stockList.add(stock);
				}else stockList.add(stock);
					
				

			}
			cursor.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
		//List novaLista = new ArrayList(new HashSet(listaAntiga)); 
		
		return stockList;
	}

	public ArrayList<Stock> getStockOrderByStandardDeviation_15() {
		BasicDBObject sort = new BasicDBObject("standardDeviation_15", 1);
		DBCursor cursor = getCollection_stocks().find().sort(sort);

		DBObject mongo_stock = null;
		ArrayList<Stock> stockList = new ArrayList<Stock>();
		Stock stock = null;

		try {
			while (cursor.hasNext()) {

				mongo_stock = cursor.next();
				stock = new Stock(mongo_stock.get("_id").toString(), null);

				stock.setAvarangeReturn_15(Double.parseDouble(mongo_stock.get(
						"avarangeReturn_15").toString()));
				stock.setAvarangeReturn_30(Double.parseDouble(mongo_stock.get(
						"avarangeReturn_30").toString()));

				stock.setStandardDeviation_15(Double.parseDouble(mongo_stock
						.get("standardDeviation_15").toString()));
				stock.setStandardDeviation_30(Double.parseDouble(mongo_stock
						.get("standardDeviation_30").toString()));

				stock.setVariance_15(Double.parseDouble(mongo_stock.get(
						"variance_15").toString()));
				stock.setVariance_30(Double.parseDouble(mongo_stock.get(
						"variance_30").toString()));

				stock.setVarianceCoefficient_15(Double.parseDouble(mongo_stock
						.get("varianceCoefficient_15").toString()));
				stock.setVarianceCoefficient_30(Double.parseDouble(mongo_stock
						.get("varianceCoefficient_30").toString()));

				stockList.add(stock);

			}
			cursor.close();
		} catch (Exception e) {

		}

		return stockList;
	}

	public boolean dropStock(Stock stock) {
		boolean result = false;

		try {
			BasicDBObject where = new BasicDBObject("_id", stock.getCodeName());
			DBObject stockValues = null;
			DBObject stocks = null;

			DBCursor cursorStock = getCollection_stocks().find(where);
			DBCursor cursorStockPrices = getCollection_stock_prices().find(
					where);

			while (cursorStock.hasNext()) {
				stocks = cursorStock.next();
				getCollection_stocks().remove(stocks);
				result = true;

			}
			while (cursorStockPrices.hasNext()) {
				stockValues = cursorStockPrices.next();
				getCollection_stock_prices().remove(stockValues);
				result = true;
			}

			cursorStock.close();
			cursorStockPrices.close();
		} catch (Exception e) {
			e.printStackTrace();
			result = false;
		}

		return result;
	}

	public DBCollection getCollection_stock_prices() {
		return collection_stock_prices;
	}

	public void setCollection_stock_prices(DBCollection collection_stock_prices) {
		this.collection_stock_prices = collection_stock_prices;
	}

	public DBCollection getCollection_stocks() {
		return collection_stocks;
	}

	public void setCollection_stocks(DBCollection collection_stocks) {
		this.collection_stocks = collection_stocks;
	}

	public DBCollection getCollection_userStockSugestions() {
		return collection_userStockSugestions;
	}

	public void setCollection_userStockSugestions(
			DBCollection collection_userStockSugestions) {
		this.collection_userStockSugestions = collection_userStockSugestions;
	}
}
