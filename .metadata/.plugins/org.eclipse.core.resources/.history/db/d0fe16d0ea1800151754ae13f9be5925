package core.agents.util;

import jade.core.AID;
import jade.core.Agent;
import jade.core.behaviours.OneShotBehaviour;
import jade.core.behaviours.SimpleBehaviour;
import jade.domain.DFService;
import jade.domain.FIPAException;
import jade.domain.FIPAAgentManagement.DFAgentDescription;
import jade.domain.FIPAAgentManagement.ServiceDescription;
import jade.lang.acl.ACLMessage;
import suport.util.InfoConversations;
import suport.util.database.mongoDB.pojo.OrdersCreate;
import core.agents.ConversationsID;
import core.agents.behaviours.CommunicationBehaviour;
import core.agents.behaviours.CreateExpertsAgents;

public class AgenteA extends Agent {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private CreateExpertsAgents behaviourCreateAgents;
	private CommunicationBehaviour communication;
	private OneShotBehaviour behaviourTest;
	private SimpleBehaviour behaviourTest2;
	private InfoConversations info;
	private AgenteA agentA;
	public void setup() {
		DFAgentDescription agentDescriptor = new DFAgentDescription();
		agentDescriptor.setName(getAID());
		agentA=this;
		
		info= new InfoConversations("RAMON", 0);

		try {
			DFService.register(this, agentDescriptor);
			
			OrdersCreate orderCreate= new OrdersCreate();
			orderCreate.setUserIndetifier("ramon");
			orderCreate.setUserPerfil(0);
			orderCreate.setUserValue(1000);
			
			addBehaviour(new OneShotBehaviour(agentA) 
			{
				private static final long serialVersionUID = 1L;
				String hunterName;

				public void action() {
					try {
						DFAgentDescription dfd = new DFAgentDescription();
						ServiceDescription service = new ServiceDescription();
						service.setType("StockHunter");
						service.setName("Hunter");

						dfd.addServices(service);
						DFAgentDescription[] result = DFService.search(agentA, dfd);
						if (result != null)
							hunterName = result[0].getName().getLocalName();

						ACLMessage hunterMessage = new ACLMessage(ACLMessage.CFP);
						hunterMessage.addReceiver(new AID(hunterName,AID.ISLOCALNAME));
						hunterMessage.setConversationId(ConversationsID.STOCKS_HUNTER_SUGGESTIONS);
						hunterMessage.setContentObject(agentA.info);
						myAgent.send(hunterMessage);

					} catch (Exception e) {// TODO LOG
						e.printStackTrace();
					}
				}
			});
			
			System.out.println("agente "+this.getName());
			behaviourCreateAgents=new CreateExpertsAgents(this, orderCreate);
		
			communication = new CommunicationBehaviour(this);		
			communication.addConversationIdToListen(ConversationsID.CREATE_EXPERTS, behaviourCreateAgents, ACLMessage.INFORM);
			communication.start();
			
			
			
		} catch (FIPAException e) {

			e.printStackTrace();
		}
	}

	public void takeDown() 
	{
		System.out.println(this.getLocalName() + " says: Bye");
		try {
			// Unregister the agent in plataform
			DFAgentDescription dfd = new DFAgentDescription();
			dfd.setName(getAID());
			DFService.deregister(this, dfd);
			// kill experts
			
		} catch (Exception e) {// TODO LOG
			e.printStackTrace();
		}
	}

}
