package core.agents.util;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Map.Entry;

import javax.swing.JOptionPane;

import jade.core.AID;
import jade.core.Agent;
import jade.core.behaviours.CyclicBehaviour;
import jade.core.behaviours.OneShotBehaviour;
import jade.core.behaviours.SequentialBehaviour;
import jade.core.behaviours.SimpleBehaviour;
import jade.core.behaviours.WakerBehaviour;
import jade.domain.DFService;
import jade.domain.FIPAException;
import jade.domain.FIPAAgentManagement.DFAgentDescription;
import jade.domain.FIPAAgentManagement.ServiceDescription;
import jade.lang.acl.ACLMessage;
import suport.financial.wallet.Stock;
import suport.util.InfoConversations;
import suport.util.database.mongoDB.pojo.OrdersCreate;
import core.agents.ConversationsID;
import core.agents.behaviours.CommunicationBehaviour;
import core.agents.behaviours.CreateExpertsAgents;
import core.agents.suport.WalletManagerAuxiliary;

public class AgenteA extends Agent {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private CreateExpertsAgents behaviourCreateAgents;
	private CommunicationBehaviour communication;
	private OneShotBehaviour behaviourTest;
	private SimpleBehaviour behaviourTest2;
	private InfoConversations info;
	private AgenteA agentA;
	public void setup() {
		DFAgentDescription agentDescriptor = new DFAgentDescription();
		agentDescriptor.setName(getAID());
		agentA=this;
		
		info= new InfoConversations("RAMON", 0);

		try {
			DFService.register(this, agentDescriptor);
			
			OrdersCreate orderCreate= new OrdersCreate();
			orderCreate.setUserIndetifier("ramon");
			orderCreate.setUserPerfil(0);
			orderCreate.setUserValue(1000);
			
			addBehaviour(new OneShotBehaviour(agentA) 
			{
				private static final long serialVersionUID = 1L;
				String hunterName;

				public void action() {
					try {
						DFAgentDescription dfd = new DFAgentDescription();
						ServiceDescription service = new ServiceDescription();
						service.setType("StockHunter");
						service.setName("Hunter");

						dfd.addServices(service);
						DFAgentDescription[] result = DFService.search(agentA, dfd);
						if (result != null)
							hunterName = result[0].getName().getLocalName();

						JOptionPane.showMessageDialog(null, "Investidor: Achei o Agente "+hunterName);
						
						ACLMessage hunterMessage = new ACLMessage(ACLMessage.CFP);
						hunterMessage.addReceiver(new AID(hunterName,AID.ISLOCALNAME));
						hunterMessage.setConversationId(ConversationsID.STOCKS_HUNTER_SUGGESTIONS);
						hunterMessage.setContentObject(agentA.info);
						myAgent.send(hunterMessage);

						
					} catch (Exception e) {
						e.printStackTrace();
					}
				}
			});
			
			addBehaviour(new CyclicBehaviour(agentA)
			{
				private ACLMessage msg=null;
				@Override
				public void action() {
					
					msg= agentA.receive();
					if(msg!=null)
					{
						if(msg.getConversationId()==ConversationsID.STOCKS_HUNTER_SUGGESTIONS)
						{
							agentA.info = (InfoConversations) msg
									.getContentObject();
							agentA.stockListManaged = new ArrayList<Stock>();
							System.out.println("=====================");
							System.out.println("stock List size"+ agentA.info.getStockList().size());
							
							SequentialBehaviour suggestions = new SequentialBehaviour(
									manager);
							suggestions
									.addSubBehaviour(new OneShotBehaviour(
											manager) {
										private static final long serialVersionUID = 1L;

										@Override
										public void action() {
											try {
												ArrayList<ArrayList<Stock>> listTemp;
												ArrayList<Stock> listTemp_approved;
												ArrayList<Stock> listTemp_refused;

												manager.walletManagerAuxiliary = new WalletManagerAuxiliary(
														manager.info.getStockList(),
														manager.user.getUserValue(),
														manager.info.getUserProfile(),
														manager.user.getUserIndetifier());
												
												
												listTemp = manager.walletManagerAuxiliary
														.analyzeStocksSuggestionsList();
												listTemp_approved = listTemp
														.get(0);
												listTemp_refused = listTemp
														.get(1);

												/*
												 * Esse trecho pode dar
												 * problema ... melhorar
												 * isso do jeito q esta,
												 * se a quantidade de
												 * acoes for menor do
												 * que o limite ... vai
												 * dar erro
												 */
												switch (manager.info
														.getUserProfile()) {
												case CORAJOSO: {
													if (listTemp_approved
															.size() >= manager.STOCK_QTD_CORAJOSO) {
														for (int i = 0; i < manager.STOCK_QTD_CORAJOSO; i++) {
															manager.stockListManaged
																	.add(listTemp_approved
																			.get(i));
														}
													} else {
														for (Stock stock : listTemp_approved) {
															manager.stockListManaged
																	.add(stock);
														}
														if(listTemp_refused.size()>=2)
															for (int i = 0; i < 2; i++) 
															{
																manager.stockListManaged
																		.add(listTemp_refused
																				.get(i));
															}
															else
																for (int i = 0; i < listTemp_refused.size(); i++) 
																{
																	manager.stockListManaged
																			.add(listTemp_refused
																					.get(i));
																}
														
													}
												}
													break;
												case MODERADO: {
												//	JOptionPane.showMessageDialog(null,"Moderado Stocks "+manager.info.getStockList());
													if (listTemp_approved.size() >= manager.STOCK_QTD_MODERADO) {
														for (int i = 0; i < manager.STOCK_QTD_MODERADO; i++) {
															manager.stockListManaged
																	.add(listTemp_approved
																			.get(i));
														}
													} else {
														for (Stock stock : listTemp_approved) 
														{
															manager.stockListManaged
																	.add(stock);
														}
														if(listTemp_refused.size()>=2)
														for (int i = 0; i < 2; i++) 
														{
															manager.stockListManaged
																	.add(listTemp_refused
																			.get(i));
														}
														else
															for (int i = 0; i < listTemp_refused.size(); i++) 
															{
																manager.stockListManaged
																		.add(listTemp_refused
																				.get(i));
															}
															
													}
												}
													break;
												case CONSERVADOR: 
												{
													if (listTemp_approved
															.size() >= manager.STOCK_QTD_CONSERVADOR) {
														for (int i = 0; i < manager.STOCK_QTD_CONSERVADOR; i++) {
															manager.stockListManaged
																	.add(listTemp_approved
																			.get(i));
														}
													} else {
														for (Stock stock : listTemp_approved) {
															manager.stockListManaged
																	.add(stock);
														}
														if(listTemp_refused.size()>=2)
															for (int i = 0; i < 2; i++) 
															{
																manager.stockListManaged
																		.add(listTemp_refused
																				.get(i));
															}
															else
																for (int i = 0; i < listTemp_refused.size(); i++) 
																{
																	manager.stockListManaged
																			.add(listTemp_refused
																					.get(i));
																}
														
													}
												}
													break;
												default:
													break;
												}// TODO LOG
													// Criando os
													// agentes experts
											//	JOptionPane.showMessageDialog(null," Vou criar os Agentes--");
												manager.createExperts(manager.info.getUserProfile(),manager.info.getUserName(),
																						manager.stockListManaged);
											} catch (Exception e) {// TODO
																	// LOG
												e.printStackTrace();
											}
										}
									});// TODO LOG
					
							
						}
					}else block();
					
					// TODO Auto-generated method stub
					
				}
			});			
			
		} catch (FIPAException e) {

			e.printStackTrace();
		}
	}

	public void takeDown() 
	{
		System.out.println(this.getLocalName() + " says: Bye");
		try {
			// Unregister the agent in plataform
			DFAgentDescription dfd = new DFAgentDescription();
			dfd.setName(getAID());
			DFService.deregister(this, dfd);
			// kill experts
			
		} catch (Exception e) {// TODO LOG
			e.printStackTrace();
		}
	}

}
