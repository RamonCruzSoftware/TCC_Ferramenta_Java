package core.agents;

import jade.core.AID;
import jade.core.Agent;
import jade.core.behaviours.CyclicBehaviour;
import jade.core.behaviours.OneShotBehaviour;
import jade.core.behaviours.TickerBehaviour;
import jade.core.behaviours.WakerBehaviour;
import jade.domain.DFService;
import jade.domain.FIPAAgentManagement.DFAgentDescription;
import jade.lang.acl.ACLMessage;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.Map.Entry;

import javax.swing.JOptionPane;

import suport.financial.partternsCandleStick.CandleStick;
import suport.financial.strategy.Bearish_Bullish_Strategy;
import suport.financial.strategy.MovingAvarangeExponentialStrategy;
import suport.financial.strategy.MovingAvarangeSimpleStrategy;
import suport.financial.strategy.Strategy;
import suport.financial.wallet.Stock;
import suport.util.database.mongoDB.dao.ManagedStockDao;
import suport.util.database.mongoDB.dao.SimulationDataDao;
import suport.util.database.mongoDB.dao.StockDao;
import suport.util.database.mongoDB.pojo.ManagedStock;
import suport.util.database.mongoDB.pojo.SimulationData;
import suport.util.requests.YahooFinance;

public class Expert extends Agent {

	private static final long serialVersionUID = 1L;
	private Expert expert;
	private ArrayList<Stock> stockList;
	private StockDao stockDao;
	private YahooFinance yahooFinances;

	private String dir_1 = "/home/ramon/Desktop";
	private String subDir_1 = "/TCC2";
	private String subDir_2 = "/Ativos";
	@SuppressWarnings("unused")
	private String sectorsCsvFilePath = "/home/ramon/Documents/Workspace/Setores";

	@SuppressWarnings("unused")
	private ManagedStock managedStock;
	private ManagedStockDao managedStockDao;
	private Map<Stock, Strategy> stocksMap;
	private Map<Stock, String> ordensToBuyOrSell; // Buy,Sell,Nothing

	private ArrayList<Stock> orderToApproveBuy;
	private ArrayList<Stock> orderToApproveSell;

	private String userIdentifier;
	private String managerName;

	private double quota;
	private StockManager stockManager;
	private boolean ordersLocker;
	private boolean isSimulation;
	
	private SimulationDataDao simulationDataDao;
	private SimulationData simulationData;
	
	
	protected void setup() {
		try {

			expert = this;
			stockDao = new StockDao();
			yahooFinances = new YahooFinance(dir_1, subDir_1, subDir_2);
			managedStock = null;
			managedStockDao = new ManagedStockDao();
			stocksMap = new HashMap<Stock, Strategy>();
			ordensToBuyOrSell = new HashMap<Stock, String>();
			stockManager = new StockManager();
			ordersLocker = false;
			isSimulation=true;
			
			if(isSimulation)
				{
					expert.simulationStart("simulator", 3000);
					expert.simulationDataDao=new SimulationDataDao();
				}
				
			DFAgentDescription dfd = new DFAgentDescription();
			dfd.setName(getAID());
			DFService.register(this, dfd);

			// TODO colocar guarda de log
			System.out.println("Hi, I'm live , my name is "
					+ this.getLocalName());

			addBehaviour(new CyclicBehaviour(expert) {
				/**
				 * 
				 */
				private static final long serialVersionUID = 1L;

				@SuppressWarnings({ "unchecked", "deprecation" })
				@Override
				public void action() {
					ACLMessage msg = myAgent.receive();
					if (msg != null)
					{
						try {
							switch (msg.getPerformative()) {
							case ACLMessage.INFORM: 
							{
								if (msg.getConversationId() == ConversationsID.INIT_WORK) {
									ArrayList<Stock> temp = (ArrayList<Stock>) msg
											.getContentObject();
									expert.managerName = msg.getSender()
											.getLocalName();
									if (temp != null) {
										expert.stockList = new ArrayList<Stock>();
										for (Stock s : temp) {
											s.setCandleSticks(expert.stockDao
													.getStockPrices_last40(s
															.getCodeName()));
											expert.stockList.add(s);
										}
										if (stockList.size() > 0) {
											// TODO guardar log
											System.out
													.println("Expert :"
															+ expert.getLocalName()
															+ " Manager sendMe these Stocks:");
											for (Stock s : stockList) { // TODO
																		// guardar
																		// log
												System.out.println(s
														.getCodeName()
														+ " with "
														+ s.getCandleSticks()
																.size()
														+ " prices");
											}
										}
									}
								}
								if (msg.getConversationId() == ConversationsID.EXPERT_USER_NAME) {
									expert.userIdentifier = (String) msg.getContent();
								}
								if (msg.getConversationId() == ConversationsID.EXPERT_STRATEGY_MME_13_21) { // TODO
																											// log
									System.out.println(expert.getLocalName()+ " Strategy MME 13/21");
									Strategy mme = null;
									for (Stock s : expert.stockList) {
										mme = new MovingAvarangeExponentialStrategy(0, 0, 0);
										for (int i = 0; i < s.getCandleSticks()
												.size(); i++) {
											mme.addValue(s.getCandleSticks()
													.get(i).getClose());
										}
										stocksMap.put(s, mme);
									}
									try {
										// TODO Resolver esse warnning
										Date date = new Date();
										date.setMinutes(date.getMinutes() + 1);
										expert.requestRoutine(date, 0,
												60 * 1000);
									} catch (Exception e) {
										e.printStackTrace();
									}
								}
								if (msg.getConversationId() == ConversationsID.EXPERT_STRATEGY_MMS_13_21) { // TODO
																											// log
									System.out.println(expert.getLocalName()
											+ " Strategy MMS 13/21");
									Strategy mms = null;
									for (Stock s : expert.stockList) {
										mms = new MovingAvarangeSimpleStrategy(
												13, 21);
										for (int i = 0; i < s.getCandleSticks()
												.size(); i++) {
											mms.addValue(s.getCandleSticks()
													.get(i).getClose());
										}
										stocksMap.put(s, mms);
									}
									try {// TODO resolver isso
											// DateFormat format = new
											// SimpleDateFormat("MM/dd/yyyy hh:mma",Locale.US);
											// Date date =
											// (Date)format.parse("10/26/2014 10:02pm");
										Date date = new Date();
										date.setMinutes(date.getMinutes() + 1);
										expert.requestRoutine(date, 0,
												60 * 1000);
									} catch (Exception e) {
										e.printStackTrace();
									}
								}
								if (msg.getConversationId() == ConversationsID.EXPERT_STRATEGY_MMS_21_34) {// TODO
																											// log
									System.out.println(expert.getLocalName()
											+ " Strategy MMS 21/34");
									Strategy mms = null;
									for (Stock s : expert.stockList) {
										mms = new MovingAvarangeSimpleStrategy(
												21, 34);
										for (int i = 0; i < s.getCandleSticks()
												.size(); i++) {
											mms.addValue(s.getCandleSticks()
													.get(i).getClose());
										}
										stocksMap.put(s, mms);
									}
									try {
										// TODO resolver isso
										// DateFormat format = new
										// SimpleDateFormat("MM/dd/yyyy hh:mma",Locale.US);
										// Date date =
										// (Date)format.parse("10/26/2014 10:02pm");
										Date date = new Date();
										date.setMinutes(date.getMinutes() + 1);

										expert.requestRoutine(date, 0,
												60 * 1000);
									} catch (Exception e) {
										e.printStackTrace();
									}
								}
								if (msg.getConversationId() == ConversationsID.EXPERT_STRATEGY_MME_21_34) { // TODO
																											// log
									System.out.println(expert.getLocalName()
											+ " Strategy MME 21/34");
									Strategy mms = null;
									for (Stock s : expert.stockList) {
										mms = new MovingAvarangeExponentialStrategy(
												0, 21, 34);
										for (int i = 0; i < s.getCandleSticks()
												.size(); i++) {
											mms.addValue(s.getCandleSticks()
													.get(i).getClose());
										}
										stocksMap.put(s, mms);
									}
									try {// TODO log
											// DateFormat format = new
											// SimpleDateFormat("MM/dd/yyyy hh:mma",Locale.US);
											// Date date =
											// (Date)format.parse("10/26/2014 10:02pm");
										Date date = new Date();
										date.setMinutes(date.getMinutes() + 1);

										expert.requestRoutine(date, 0,
												60 * 1000);

									} catch (Exception e) {
										e.printStackTrace();
									}
								}
								if (msg.getConversationId() == ConversationsID.EXPERT_STRATEGY_BEARISH_ENGULFING_BULLSH_ENGULF) {// TODO
																																	// log
									System.out.println(expert.getLocalName()+ " Strategy Bearish engulfing bullsh engulf");
									Strategy BearBull = null;
									for (Stock s : expert.stockList) {
										BearBull = new Bearish_Bullish_Strategy();
										for (int i = 0; i < s.getCandleSticks()
												.size(); i++) {
											BearBull.addCandleStick(s
													.getCandleSticks().get(i));
										}
										stocksMap.put(s, BearBull);
									}
									try {// TODO resolver isso
											// DateFormat format = new
											// SimpleDateFormat("MM/dd/yyyy hh:mma",Locale.US);
											// Date date =
											// (Date)format.parse("10/26/2014 10:02pm");
										Date date = new Date();
										date.setMinutes(date.getMinutes() + 1);

										expert.requestRoutine(date, 0,
												60 * 1000);
									} catch (Exception e) {
										e.printStackTrace();
									}
								}
								if (msg.getConversationId() == ConversationsID.EXPERT_STRATEGY_DARK_CLOUD_BULLISH_ENGULF) {// TODO
																															// log
									System.out.println(expert.getLocalName()+ " Strategy dark cloud bullish engulf");
									Strategy DarkBull = null;

									for (Stock s : expert.stockList) {
										DarkBull = new Bearish_Bullish_Strategy();
										for (int i = 0; i < s.getCandleSticks()
												.size(); i++) {
											DarkBull.addCandleStick(s
													.getCandleSticks().get(i));
										}
										stocksMap.put(s, DarkBull);
									}
									try {// TODO resolver isso
											// DateFormat format = new
											// SimpleDateFormat("MM/dd/yyyy hh:mma",Locale.US);
											// Date date =
											// (Date)format.parse("10/26/2014 10:02pm");
										Date date = new Date();
										date.setMinutes(date.getMinutes() + 1);

										expert.requestRoutine(date, 0,
												60 * 1000);
									} catch (Exception e) {
										e.printStackTrace();
									}
								}
								if (msg.getConversationId() == ConversationsID.EXPERT_REMOVE_STOCK) {
									// TODO fazer isso kkk
								}
								
								if(msg.getConversationId()==ConversationsID.SIMULATION_REQUEST_STOP)
								{
									expert.stocksMap.remove(msg.getContent().toString());
								}
							}
								break;
							case ACLMessage.AGREE: { // TODO INCLUIR O ID PARA
														// AUTORIZACAO DE VENDAS
								
								if(msg.getConversationId()==ConversationsID.EXPERT_ORDER_SELL)
								{
									Stock stockTemp=null;
									double value=0;
									for(Stock s:expert.orderToApproveSell)
									{
										if(s.getCodeName().equals(msg.getContent()))
											stockTemp=s;
									}
									value=expert.stockManager.orderSell(stockTemp);
									ACLMessage infoValue=new ACLMessage(ACLMessage.INFORM);
									infoValue.setConversationId(ConversationsID.SOLD);
									infoValue.setContent(""+value);
									//TODO
									System.out.println(expert.getLocalName()+": Vendido ["+stockTemp.getCodeName()+"]- R$ "+value);
									
								//	JOptionPane.showMessageDialog(null, expert.getLocalName()+":Venda autorizada "+stockTemp.getCodeName());
									if (expert.stockManager.listManagedStock.size() == 0)
										expert.ordersLocker = false;
								}

								if (msg.getConversationId() == ConversationsID.EXPERT_ORDER_BUY) 
								{
									String managerAnswer = msg.getContent().toString();
									int underScore = 0;
									for (int i = 0; i < managerAnswer.length(); i++) {
										if ((managerAnswer.charAt(i) + "")
												.equals("_")) {
											underScore = i;
										}
									}
									String value = managerAnswer.substring(
											underScore + 1,
											managerAnswer.length());
									expert.quota = Double.parseDouble(value);
									// TODO log
									System.out.println(getLocalName()
											+ ": Da R$:" + expert.quota
											/ expert.orderToApproveBuy.size()
											+ " para cada acao");

									for (Stock s : expert.orderToApproveBuy) {
										if (s != null) {
											int qtd = (int) (expert.quota / s.getCurrentCandleStick().getClose());
											// TODO log
											System.out.println(getLocalName()+ " comprando "+ s.getCodeName());
											System.out.println(getLocalName()+ " preco unitario R$: "+ (s.getCurrentCandleStick().getClose()));
											System.out.println(getLocalName()+ " Quantidade a comprar "+ qtd);
											

											if (qtd > 0)
											{
												expert.stockManager.orderBuy(s,qtd);
												managedStock = new ManagedStock();
												managedStock.setCodeName(s.getCodeName());
												managedStock.setUserIdentifier(expert.userIdentifier);
												expert.managedStockDao.insertManagedStock(managedStock);
												//JOptionPane.showMessageDialog(null, expert.getLocalName()+":Compra autorizada "+s.getCodeName());
											}
												
										}
									}
									expert.ordersLocker = true;
									expert.orderToApproveBuy.clear();
									
									
								}
							}break;
							
							case ACLMessage.REFUSE: {
								if (msg.getConversationId() == ConversationsID.EXPERT_ORDER_BUY) {// TODO
																									// log
									System.out.println(this.getAgent()
											.getLocalName()
											+ expert.getLocalName()+": Manager dind't approved");
									expert.ordersLocker = false;
								}
							}break;
							case ACLMessage.PROPOSE:
							{
								if(msg.getConversationId()==ConversationsID.SIMULATION_REQUEST)
								{
									try{
										
										Strategy strategy = null;
										CandleStick current = null;
										String codeName=null;
										Stock stockTemp = null;
										
										 current=(CandleStick)msg.getContentObject();
										 codeName=current.getStockCode();
										 
//										 System.out.println(expert.getLocalName()+":[SIMULATION] Recebido cotacao :"+codeName+" ;" +
//										 		"date:"+current.getDate()+" close:R$ "+current.getClose());
										 
										 for(Entry<Stock, Strategy>s:expert.stocksMap.entrySet())
										 {
											 	if(s.getKey().getCodeName().equalsIgnoreCase(codeName))
											 		{
												 		 stockTemp=s.getKey();
												 		 strategy=s.getValue();
											 		}
										 }
										 
										 if(current!=null && codeName!=null)
										 {
											
											strategy.addValue(current.getClose());
											strategy.addCandleStick(current);
											stockTemp.setCurrentPrice(current.getClose());
											stockTemp.addCurrentCandleStick(current);
											// TODO log
											
											System.out.println(expert.getLocalName()+" : "+stockTemp.getCodeName()+ 
																"-Order  " + strategy.makeOrder()+" valor:"+current.getClose()+
																"  Date:"+stockTemp.getCandleSticks().get(stockTemp.getCandleSticks().size()-1).getDate()+"\n\n");
											
											if(!strategy.makeOrder().equalsIgnoreCase("nothing"))
											{
												expert.simulationData = new SimulationData(expert.getLocalName(),strategy.makeOrder() , 
														stockTemp.getCandleSticks().get(stockTemp.getCandleSticks().size()-1).getDate(),
														current.getClose(), stockTemp.getCodeName());
												expert.simulationDataDao.insertManagedStock(simulationData);
											}
											
											
											// Armazeno as ordens para pedir autorizacao ao
											// manager
											if (
													expert.ordensToBuyOrSell.get(stockTemp) == null
													&& !strategy.makeOrder().equalsIgnoreCase("nothing")
													&& !strategy.makeOrder().equalsIgnoreCase(null)
													//&& !expert.ordersLocker
												) 
											{
//												expert.ordensToBuyOrSell.remove(stockTemp);
												
												expert.ordensToBuyOrSell.put(stockTemp,strategy.makeOrder());//Descomentar essa linha
												// TODO LOG
												System.out.println(expert.getLocalName()+":[SIMULACAO] pedir para compra/vender essa acao "+ stockTemp+"[R$:"+stockTemp.getCurrentPrice()+" ]");
											} else {
												// TODO acredito q essa linha nao seja
												// necessaria
												
												// expert.ordensToBuyOrSell.put(stockTemp,strategy.makeOrder());
											}
									
											expert.stocksMap.remove(stockTemp);
											expert.stocksMap.put(stockTemp, strategy);
												
										 }
										 
											if (expert.ordensToBuyOrSell.size() > 0) 
											{
												// TODO log
												System.out.println(expert.getLocalName()+":[SIMULACAO] Existem acoes para vender ou comprar ");
												expert.ordersToBuyOrSell();
											//	expert.ordersLocker = true;//POG
												
											}
										
									
									}catch (Exception e) 
											{
												 
											}
									
							}
								
									
							}break;
							case ACLMessage.CFP:
							{
								ArrayList<Stock>stockListMsg=null;
								if(msg.getConversationId() == ConversationsID.RISK_CALCULATION_TIME)
								{
									ACLMessage reply=msg.createReply();
									stockListMsg=expert.stockManager.getStocksBougth();
									reply.setContentObject(stockListMsg);
									msg.setConversationId(ConversationsID.RISK_CALCULATION_TIME);
									
									myAgent.send(reply);
									
								}
							}break;
							default:
								break;
							}
						} catch (Exception e) 
						{
							e.printStackTrace();
						}
						} else
						block();
				}
			});
			
		} catch (Exception e) {
			// TODO log
			System.out.println("Saw exception in HostAgent: " + e);
			e.printStackTrace();
		}
	}

	protected void takeDown() { // TODO log
		System.out.println(getLocalName() + " says: Bye");
		try {
			addBehaviour(new OneShotBehaviour() {
				private static final long serialVersionUID = 1L;

				@Override
				public void action() {
					ACLMessage message = new ACLMessage(ACLMessage.INFORM);
					message.addReceiver(new AID(managerName, AID.ISLOCALNAME));
					message.setConversationId(ConversationsID.DEAD_EXPERT);
					myAgent.send(message);
					// TODO colocar log
				}
			});
			DFAgentDescription dfd = new DFAgentDescription();
			dfd.setName(getAID());
			DFService.deregister(this, dfd);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	private void simulationStart(final String simulationAgentName,int timeInterval) 
	{// TODO log
		
		// inicia o trabalho requisitando o preco corrente
				addBehaviour(new TickerBehaviour(expert,timeInterval) 
				{
					private static final long serialVersionUID = 1L;

					@Override
					public void onTick()
					{
						if(expert.stocksMap.size()>0)
						{
							for(Entry<Stock, Strategy>s:expert.stocksMap.entrySet())
							{
								ACLMessage msgRequest=new ACLMessage(ACLMessage.CFP);
								msgRequest.setConversationId(ConversationsID.SIMULATION_REQUEST);
								msgRequest.addReceiver(new AID(simulationAgentName, AID.ISLOCALNAME));
								msgRequest.setContent(s.getKey().getCodeName());
								myAgent.send(msgRequest); //TODO
								System.out.println(expert.getLocalName()+": solicitando cotacao para "+s.getKey().getCodeName());
								
							}
						}else 
						{
							System.out.println("====Simulacao finalizada!====");
							this.stop();
						}
						
					}
				});
	}

private CandleStick requestStocksPrices(Stock stock) 
{
		CandleStick candleStick = null;
		try {
			if (expert.yahooFinances.storeCsvCurrentPriceStock(stock.getCodeName()))
			{// TODO Colocar log
				candleStick = expert.yahooFinances.getCurrentValue(stock.getCodeName());
			}
			if (
					!(candleStick.getDate().getTime() == stock.getCandleSticks()
					.get(stock.getCandleSticks().size() - 1).getDate()
					.getTime())
				) 
			{
				return candleStick;
			} else
				return null;
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@SuppressWarnings("unused")
	private void requestRoutine(Date startDate, int periodicity,
			final int testInterval) {
		final long periodicDailyInterval = 24 * 60 * 60 * 1000;
		final long periodicWeeklyInterval = 7 * 24 * 60 * 60 * 1000;
		;
		final long periodicMothlyInterval = 4 * 7 * 24 * 60 * 60 * 1000;
		final long periodicInteval;

		switch (periodicity) {
		case 0:
			periodicInteval = periodicDailyInterval;
			break;
		case 1:
			periodicInteval = periodicWeeklyInterval;
			break;
		case 2:
			periodicInteval = periodicMothlyInterval;
			break;
		default:
			periodicInteval = 0;
			break;
		}
		if(!isSimulation)
		{
			// inicia o trabalho requistando o preco corrente
			addBehaviour(new OneShotBehaviour(this) 
			{
				/**
				 * 
				 */
				private static final long serialVersionUID = 1L;

				@Override
				public void action() {
					try {
						Strategy strategy = null;
						CandleStick current = null;
						Stock stockTemp = null;

						for (Entry<Stock, Strategy> e : expert.stocksMap.entrySet()) { // TODO
																						// log
							stockTemp = e.getKey();
							System.out.println(getLocalName()
									+ ": Request Current Value of "
									+ e.getKey().getCodeName());

							// TODO
							
							 current=expert.requestStocksPrices(e.getKey());
							// TODO LOG
							System.out.println("Current = " + current);
							if (current != null) {
								strategy = e.getValue();
								strategy.addValue(current.getClose());
								// TODO log
								System.out.println(e.getKey().getCodeName()
										+ " Order  " + strategy.makeOrder());
								// Armazeno as ordens para pedir autorizacao ao
								// manager
								if (expert.ordensToBuyOrSell.get(e.getKey()) == null
										&& !strategy.makeOrder().equalsIgnoreCase(
												"nothing")
										&& !strategy.makeOrder().equalsIgnoreCase(
												null)
												&&!expert.ordersLocker
												) {
									//expert.ordensToBuyOrSell.remove(e.getKey());
									expert.ordensToBuyOrSell.put(e.getKey(),strategy.makeOrder());
									// TODO LOG
									System.out.println("pedir para vender essa acao "
													+ e.getKey());
								} else {
									// TODO acredito q essa linha nao seja
									// necessaria
//									if(expert.ordensToBuyOrSell.get(e.getKey())==null)
//										expert.ordensToBuyOrSell.put(stockTemp,strategy.makeOrder());
									
									
								}
								expert.stocksMap.remove(e);
								expert.stocksMap.put(stockTemp, strategy);
							}
						}
						if (expert.ordensToBuyOrSell.size() > 0) {
							expert.ordersToBuyOrSell();
							// TODO log
							System.out
									.println("Existem acoes para vender ou comprar ");
						}
					} catch (Exception e) {
						e.printStackTrace();
					}
				}
			});
			// Configura a rotina de requisicao de valores
			addBehaviour(new WakerBehaviour(this, startDate) {
				private static final long serialVersionUID = 1L;

				protected void onWake() {
					// colocar periodicInteval
					addBehaviour(new TickerBehaviour(expert, testInterval) {
						private static final long serialVersionUID = 1L;

						@Override
						protected void onTick() {
							try {
								Strategy strategy = null;
								CandleStick current = null;
								Stock stockTemp = null;

								for (Entry<Stock, Strategy> e : expert.stocksMap
										.entrySet()) {// TODO log
									stockTemp = e.getKey();
									System.out.println(getLocalName()+ ": Request Current Value of "+ e.getKey().getCodeName());
									current = expert.requestStocksPrices(e.getKey());

									if (current != null)
									{
										strategy = e.getValue();
										strategy.addValue(current.getClose());

										// TODO log
										System.out
												.println(e.getKey().getCodeName()
														+ " Order  "
														+ strategy.makeOrder());

										// Armazeno as ordens para pedir autorizacao
										// ao manager
										if (expert.ordensToBuyOrSell.get(e.getKey()) == null
												&& !strategy.makeOrder().equalsIgnoreCase("nothing"))
										{
											//expert.ordensToBuyOrSell.remove(e.getKey());
											expert.ordensToBuyOrSell.put(e.getKey(),strategy.makeOrder());

										} else {
										//	expert.ordensToBuyOrSell.put(stockTemp,strategy.makeOrder());
										}
										expert.stocksMap.remove(e);
										expert.stocksMap.put(stockTemp, strategy);
									}
								}
								// Se existir oportunidades de compra ou venda pede
								// autorizacao pro manager
								if (expert.ordensToBuyOrSell.size() > 0) {
									expert.ordersToBuyOrSell();
								}
							} catch (Exception e) {
								e.printStackTrace();
							}
						}
					});
				}
			});
		}

	}

	// Rotina de solicitacao de autorizacao de compra e vendas
	// Ver mensagens do tipo proposta
	private void ordersToBuyOrSell()
	{
		ManagedStock managedStock = null;
		expert.orderToApproveBuy = new ArrayList<Stock>();
		expert.orderToApproveSell = new ArrayList<Stock>();

		if (expert.ordensToBuyOrSell.size() > 0) {
			for (Entry<Stock, String> e : expert.ordensToBuyOrSell.entrySet())
			{
				managedStock = expert.managedStockDao.getManagedStock(e.getKey().getCodeName(), expert.userIdentifier);
				try {
					if (managedStock == null) {
						if (e.getValue().equalsIgnoreCase("Buy")) 
						{// TODO Log
							// Autorizacao
							// de compra
							Stock stockTemp = e.getKey();
							stockTemp.setSuggestion(ConversationsID.BUY_REQUEST);
							expert.orderToApproveBuy.add(stockTemp);
							expert.ordensToBuyOrSell.remove(e.getKey());
							
//							managedStock = new ManagedStock();
//							managedStock.setCodeName(e.getKey().getCodeName());
//							managedStock.setUserIdentifier(expert.userIdentifier);
//							expert.managedStockDao.insertManagedStock(managedStock);
							//TODO O Trecho acima nao faz sentido, primeiro deve ter a autorizacao depois a persistencia

							JOptionPane.showMessageDialog(null, "managedStock:"+managedStock+"\n Buy:"+stockTemp.getCodeName());
							
						} else if (e.getValue().equalsIgnoreCase("Sell")) { //provavelmente ignorar esse trecho
							// Autorizacao de venda
							Stock stockTemp = e.getKey();
							stockTemp.setSuggestion(ConversationsID.SELL_REQUEST);
							
							if(expert.stockManager.stockBougth(stockTemp))
							{
								expert.orderToApproveSell.add(stockTemp); //Para vender algo deve ter em carteira primeiro
								expert.ordensToBuyOrSell.remove(e.getKey()); 
								JOptionPane.showMessageDialog(null, "managedStock:"+managedStock+"\n Sell:"+stockTemp.getCodeName());
							}else
							{
								expert.ordensToBuyOrSell.remove(e.getKey()); //sinal Falso
							}
							
						}
					} else 
					{
						if (managedStock != null && e.getValue().equalsIgnoreCase("Buy")) 
						{
							expert.ordensToBuyOrSell.remove(e.getKey());
							JOptionPane.showMessageDialog(null, "managedStock:"+managedStock+"\n Buy:"+e.getKey().getCodeName());
						}
						if (managedStock != null && e.getValue().equalsIgnoreCase("Sell"))
						{
							
							Stock stockTemp = e.getKey();
							stockTemp.setSuggestion(ConversationsID.SELL_REQUEST);
							expert.orderToApproveSell.add(stockTemp);
							expert.ordensToBuyOrSell.remove(e.getKey());
							JOptionPane.showMessageDialog(null, "managedStock:"+managedStock+"\n Sell REQUEST:"+e.getKey().getCodeName());
						}
					}
				} catch (Exception error) {
					// TODO log
					error.printStackTrace();
				}
			}// Fim for
		}
		if (expert.orderToApproveBuy.size() > 0 && !expert.ordersLocker) {// TODO
																			// log
			System.out.println(getLocalName()+ " :Pedir autorizacao para  comprar "+ expert.orderToApproveBuy.size() + " Acoes");
			System.out.println(getLocalName() + " :Comprar  "+ expert.orderToApproveBuy.size() + " Acoes");
		}
		// TODO mudar paramentros perfomative
		if (expert.orderToApproveBuy.size() > 0 && !expert.ordersLocker) {
			addBehaviour(new OneShotBehaviour(expert) {
				private static final long serialVersionUID = 1L;

				@Override
				public void action() {
					try {// TODO log
						ACLMessage msg = new ACLMessage(ACLMessage.PROPOSE);
						msg.setConversationId(ConversationsID.EXPERT_ORDER_BUY);
						msg.addReceiver(new AID(expert.managerName,AID.ISLOCALNAME));
						msg.setContentObject(expert.orderToApproveBuy);
						myAgent.send(msg);

					//	JOptionPane.showMessageDialog(null, " MSG Buy REQUEST PARA :"+expert.orderToApproveSell.size()+" Acoes");
					} catch (Exception e1) {// TODO log
						e1.printStackTrace();
					}
				}
			});
		}
		// TODO Melhorar esse esquema
		if (expert.orderToApproveSell.size() > 0) {
			addBehaviour(new OneShotBehaviour(expert) {
				
				private static final long serialVersionUID = 1L;

				@Override
				public void action() {
					try {// TODO log
						for (Stock stock : expert.orderToApproveSell) 
						{
							if (expert.stockManager.stockBougth(stock)) 
							{
								
								double profitValue;
								ACLMessage msg = new ACLMessage(ACLMessage.PROPOSE);
								msg.setConversationId(ConversationsID.EXPERT_ORDER_SELL);
								msg.addReceiver(new AID(expert.managerName,AID.ISLOCALNAME));
								profitValue = expert.stockManager.getProfitValue(stock);
								msg.setContent("" + profitValue);
								myAgent.send(msg);

							//	JOptionPane.showMessageDialog(null,expert.getLocalName()+ " MSG Sell REQUEST PARA :"+expert.orderToApproveSell.size()+" Acoes");
							}
						}
						
					} catch (Exception e1) {// TODO log
						e1.printStackTrace();
					}
				}
			});
		}
	}

	private class StockManager {
		private StockDao stockDao;
		private ManagedStockDao managedStockDao;
		private Map<String, ManagedStock> listManagedStock;

		public StockManager() {
			this.setStockDao(new StockDao());
			this.setManagedStockDao(new ManagedStockDao());
			this.listManagedStock = new HashMap<String, ManagedStock>();
		}

		public void orderBuy(Stock stock, int qtdStocksBought) {
			try {// TODO log
				ManagedStock managedStock = new ManagedStock();
				managedStock.setBuyed(stock.getCurrentCandleStick());
				managedStock.setCodeName(stock.getCodeName());
				managedStock.setUserIdentifier(userIdentifier);
				managedStock.setQtdStocksBought(qtdStocksBought);
				managedStock.setSector(stock.getSector());
				this.getManagedStockDao().insertManagedStock(managedStock);

				this.listManagedStock = new HashMap<String, ManagedStock>();
				this.listManagedStock.put(stock.getCodeName(), managedStock);

			} catch (Exception e) {// TODO log
				e.printStackTrace();
			}
		}

		public double orderSell(Stock stock) {
			ManagedStock managedStockStored = this.managedStockDao
					.getManagedStock(stock.getCodeName(), userIdentifier);
			double profitPercent = 0;
			double profitValue = 0;

			try {
				if (managedStockStored != null) {
					
					profitValue = stock.getCurrentCandleStick().getClose()- managedStockStored.getBuyed().getClose();
					profitPercent = stock.getCurrentCandleStick().getClose()/ profitValue;
					ManagedStock managedStock_temp = this.listManagedStock.get(stock.getCodeName());
					managedStock_temp.setProfitPercent(managedStock_temp.getProfitPercent() + profitPercent);
					managedStock_temp.setProfitValue(managedStock_temp.getProfitValue() + profitValue);
					this.listManagedStock.put(stock.getCodeName(),managedStock_temp);
					expert.managedStockDao.dropManagedStockDao(managedStockStored);
					
				}
			} catch (Exception e) {// TODO log
				e.printStackTrace();
			}
			return profitValue;
		}

		public void removeManagedStock(Stock stock) {
			this.listManagedStock.remove(stock.getCodeName());
		}

		@SuppressWarnings("unused")
		public void clearListManagedStockList() {
			this.listManagedStock.clear();
		}

		public ArrayList<Stock> getStocksBougth()
		{
			ArrayList<ManagedStock> mStock=this.managedStockDao.getManagedStock(userIdentifier);
			ArrayList<Stock> resultList=null;
			
			if(mStock!=null && mStock.size()>0)
			{
				resultList=new ArrayList<Stock>();
				Stock stock=null;
				for(ManagedStock m:mStock)
				{
					stock=new Stock(m.getCodeName(), null);
			     	stock.setCandleSticks(expert.stockDao.getStockPrices_last30(m.getCodeName()));
					resultList.add(stock);
				}
				
			}
			return resultList;
		}
		public boolean stockBougth(Stock stockToVerify) {
			ManagedStock managedStockStored = this.managedStockDao.getManagedStock(stockToVerify.getCodeName(),userIdentifier);
			if (managedStockStored != null)
				return true;
			else
				return false;
		}

		@SuppressWarnings("unused")
		public StockDao getStockDao() {
			return stockDao;
		}

		public void setStockDao(StockDao stockDao) {
			this.stockDao = stockDao;
		}

		public ManagedStockDao getManagedStockDao() {
			return managedStockDao;
		}

		public void setManagedStockDao(ManagedStockDao managedStockDao) {
			this.managedStockDao = managedStockDao;
		}

		public double getProfitValue(Stock stock) {

			return this.listManagedStock.get(stock.getCodeName())
					.getProfitValue();
		}

		@SuppressWarnings("unused")
		public double getProfitPercent(Stock stock) {
			return this.listManagedStock.get(stock.getCodeName())
					.getProfitPercent();
		}
		private String cutName(Agent agent)
		{
			String str=agent.getLocalName();
			return str.substring(7, (str.length()-3));
		}
	}
}
