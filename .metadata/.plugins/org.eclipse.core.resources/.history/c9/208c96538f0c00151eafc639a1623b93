package core.agents.behaviours;

import jade.core.Agent;
import jade.core.behaviours.OneShotBehaviour;
import jade.core.behaviours.SequentialBehaviour;
import jade.core.behaviours.SimpleBehaviour;
import suport.financial.wallet.Wallet;
import suport.util.database.mongoDB.dao.WalletDao;
import suport.util.database.mongoDB.pojo.OrdersCreate;

public class CreateExpertsAgents {
	
	/*
	 * Recebe dados do cliente através de mensagem;
		Cria uma Carteira no Banco de Dados;
		Procura um Agente Hunter Local e Solicita Ações;
		Cria Agentes experts e divide as ações entre os agentes;
	 */
	private SequentialBehaviour sequentialBehaviour;
	private OneShotBehaviour createWallet;
	private SimpleBehaviour requestSocks;
	private OneShotBehaviour createExpertsAgents;
	private OrdersCreate orderCreate;
	
	private WalletDao walletDao;
	
	private Agent agent;
	public CreateExpertsAgents(Agent agent,OrdersCreate orderCreate)
	{
		this.agent=agent;
		this.orderCreate=orderCreate;
		this.walletDao= new WalletDao();
		
		this.sequentialBehaviour= new SequentialBehaviour(agent)
		{
			public int onEnd()
			{
				System.out.println("Comportamento sequencial Concluido");
			
				return 0;
			}
		};
		createBehaviour();
		
		
	}
	private CreateExpertsAgents(){}

	private void createBehaviour()
	{
		this.createWallet= new OneShotBehaviour(this.agent)
		{
			
			private static final long serialVersionUID = 1L;

			@Override
			public void action() 
			{
				System.out.println("Comportamento Criar Carteira!");
				walletDao.insertWallet(new Wallet(orderCreate.getUserIndetifier(), orderCreate.getUserValue(), 0, 0));
				
			}
		};
		this.requestSocks= new SimpleBehaviour(this.agent)
		{
			/**
			 * 
			 */
			private static final long serialVersionUID = 1L;
			private boolean retorno=false;
			@Override
			public boolean done() {
				
				return retorno;
			}
			
			@Override
			public void action() {
				
				System.out.println("Comportamento Requesitar Ativos");
				
				retorno=true;
				
			}
		};
		
		this.createExpertsAgents=new OneShotBehaviour(this.agent)
		{
			
			/**
			 * 
			 */
			private static final long serialVersionUID = 1L;

			@Override
			public void action() {
				
				System.out.println("Comportamento criar agentes especialistas");
				
			}
		};
		
	}
	public void start()
	{
			this.sequentialBehaviour.addSubBehaviour(createWallet);
			this.sequentialBehaviour.addSubBehaviour(requestSocks);
			this.sequentialBehaviour.addSubBehaviour(createExpertsAgents);
			
			this.agent.addBehaviour(sequentialBehaviour);
	}
	

}
