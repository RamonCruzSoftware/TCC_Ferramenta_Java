package core.agents.behaviours;

import java.util.HashMap;
import java.util.Map;

import core.agents.ConversationsID;
import jade.core.Agent;
import jade.core.behaviours.Behaviour;
import jade.core.behaviours.CyclicBehaviour;
import jade.lang.acl.ACLMessage;


public class CommunicationBehaviour
{

	private Agent agent;
	private Map<String, Behaviour> conversationsINFORM;
	private Map<String, Behaviour> conversationsAGREE;
	private Map<String, Behaviour> conversationsCFP;
	private Map<String, Behaviour> conversationsPROPOSE;
	private Map<String, Behaviour> conversationsREFUSE;
	private Map<String, Behaviour> conversationsREQUEST;
	private Map<String, Behaviour> conversationsACCEPT_PROPOSAL;
	
	private Map<Integer,HashMap<String, Behaviour>> performatives;
	private CyclicBehaviour listenBehaviour;
	public CommunicationBehaviour(Agent agent)
	{
		this.agent=agent;
		this.conversationsINFORM = new HashMap<String, Behaviour>();
		this.conversationsAGREE = new HashMap<String, Behaviour>();
		this.conversationsCFP = new HashMap<String, Behaviour>();
		this.conversationsPROPOSE = new HashMap<String, Behaviour>();
		this.conversationsREFUSE = new HashMap<String, Behaviour>();
		this.conversationsREQUEST = new HashMap<String, Behaviour>();
		this.conversationsACCEPT_PROPOSAL = new HashMap<String, Behaviour>();
		
		this.performatives=new HashMap<Integer, HashMap<String,Behaviour>>();
		
	}
	@SuppressWarnings("unused")
	private CommunicationBehaviour(){}
	
	public void addConversationIdToListen(String conversationID,Behaviour behaviourToTake,int performative)
	{
		switch (performative)
		{
		case ACLMessage.INFORM:
			break;

		case ACLMessage.AGREE:
			break;
		case ACLMessage.CFP:
			break;
		case ACLMessage.PROPOSE:
			break;
		case ACLMessage.REFUSE:
			break;
		case ACLMessage.REQUEST:
			break;
		case ACLMessage.ACCEPT_PROPOSAL:
			break;
			
		default:
			break;
		}
		this.conversationsINFORM.put(conversationID, behaviourToTake);
		
		
	}
	
	public void startListenBehaviour()
	{
		
	}
	
	
	private class ListenBehaviour extends CyclicBehaviour
	{

		
		private static final long serialVersionUID = 1L;
		private Map<String, Behaviour> conversationsId; 

		public  ListenBehaviour(Agent agent,Map<String, Behaviour> conversationsIDToListen)
		{
			super(agent);
			this.conversationsId=conversationsIDToListen;
		}
		
		@Override
		public void action() {
			
			ACLMessage msg=myAgent.receive();
			try
			{
				if (msg!=null)
				{
					
				}
			}catch(Exception e)
			{
				//TODO log
				e.printStackTrace();
			}
			
			
		}
		
	}

}
