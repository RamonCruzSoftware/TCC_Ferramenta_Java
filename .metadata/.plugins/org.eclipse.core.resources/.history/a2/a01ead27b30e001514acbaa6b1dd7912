package core.agents;

import jade.core.Agent;
import jade.core.behaviours.CyclicBehaviour;
import jade.core.behaviours.OneShotBehaviour;
import jade.core.behaviours.SequentialBehaviour;
import jade.core.behaviours.TickerBehaviour;
import jade.core.behaviours.WakerBehaviour;
import jade.domain.DFService;
import jade.domain.FIPAAgentManagement.DFAgentDescription;
import jade.domain.FIPAAgentManagement.ServiceDescription;
import jade.lang.acl.ACLMessage;
import jade.wrapper.AgentController;
import jade.wrapper.PlatformController;

import java.io.File;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Locale;

import suport.financial.wallet.Stock;
import suport.statistical.Statistical;
import suport.util.InfoConversations;
import suport.util.Log;
import suport.util.database.mongoDB.dao.StockDao;
import suport.util.requests.YahooFinance;
import core.agents.util.StocksInMemory;

public class Hunter extends Agent {

	private static final int CORAJOSO = 0;
	private static final int MODERADO = 1;
	private static final int CONSERVADOR = 2;
	private static final long serialVersionUID = 1L;
	private Hunter hunter;
	private boolean conversations = false;
	private Log log;
	private ArrayList<Stock> stockList = null;
	private StockDao stockDao = null;
	private Statistical statistical = null;
	private String dir_1 = "/Users/ramon/Desktop";
	private String subDir_1 = "/TCC2";
	private String subDir_2 = "/Ativos";
	private String sectorsCsvFilePath = "/Users/ramon/Dropbox/UnB/TCC/workspace/java/Setores";
	private boolean isSimulation;
	
	private StocksInMemory simulationsData;

	protected void setup() {
		try {
			
			hunter = this;
			conversations = true;
			stockDao = new StockDao();
			statistical = new Statistical();
			
			simulationsData = StocksInMemory.getInstance();
			isSimulation=true;

			DFAgentDescription dfd = new DFAgentDescription();
			dfd.setName(getAID());

			ServiceDescription service = new ServiceDescription();
			service.setType("StockHunter");
			service.setName("Hunter");

			dfd.addServices(service);
			DFService.register(this, dfd);
			
			log=new Log(this.getName().toString()); 
			log.debug("Servico registrado nas paginas amarelas Tipo:StockHunter Nome:Hunter");
			log.debug("Iniciando Trabalho e processo de Comunicacao com outros agentes");
			addBehaviour(new InitWork(hunter));
			addBehaviour(new Communication(hunter));

		} catch (Exception e) { 
			e.printStackTrace();//TODO
			log.error("Msg:"+e.getMessage()+"Causa:"+e.getCause());
		}
	}

	protected void takeDown() 
	{
		try {
			// Unregister the agent in plataform
			DFAgentDescription dfd = new DFAgentDescription();
			dfd.setName(getAID());
			DFService.deregister(this, dfd);//TODO
			log.info("Desregistrado no DF");
		} catch (Exception e) {
			e.printStackTrace();//TODO
			log.error("Msg:"+e.getMessage()+"Causa:"+e.getCause());
		}
	}

	private class InitWork extends SequentialBehaviour {
		private static final long serialVersionUID = 1L;
		private final Date date;
		private final long dailyInterval;

		@SuppressWarnings("deprecation")
		public InitWork(Agent agent)
		{
			this.addSubBehaviour(new OneShotBehaviour(agent) {
				private static final long serialVersionUID = 1L;

				@Override
				public void action() {
					try {
						File file = new File(hunter.dir_1 + hunter.subDir_1+ hunter.subDir_2);
						if (file.isDirectory()) 
						{
							if (file.listFiles().length > 2)//TODO
						   {
								hunter.log.debug("Arquivos CSV ja foram baixados");
								System.out.println("Arquivos CSV ja foram baixados");
								hunter.loadDataBase();
							}
							else 
							{
								//hunter.downloadCsvFiles(hunter.dir_1,hunter.subDir_1, hunter.subDir_2,hunter.sectorsCsvFilePath);
							}
							if (hunter.stockDao.getStocksPricesCount() == 0) 
							{//TODO
								hunter.log.debug("Carregar dados no Banco");
								System.out.println(hunter.getLocalName()+":Carregar dados no Banco");
								hunter.loadDataBase();
								hunter.log.debug("Banco carregado com "+hunter.stockDao.getStocksPricesCount()+"cotacoes");
								
							} else 
							{
								//TODO
								
								hunter.log.debug("Banco ja carregado com "+ hunter.stockDao.getStocksPricesCount()+ " Cotacoes");
								System.out.println(hunter.getLocalName()+":Banco jah carregado com "+ hunter.stockDao.getStocksPricesCount()+ " Cotacoes");
								
								if(!isSimulation)hunter.stockList = hunter.stockDao.getAllStocksWithPrices();
								else 
								{
									//hunter.stockList=hunter.stockDao.getAllStocksWithPricesBetweenInterval(hunter.simulationSetup.getStartDate(), hunter.simulationSetup.getStartDate());
									
									hunter.stockList=hunter.simulationsData.getStockList();
								
								}
								
								hunter.log.debug("Iniciando procedimento de calculo de valores estatisticos");
								
								System.out.println(hunter.getLocalName()+":Iniciando procedimento de calculo de valores estatisticos");
								if(!isSimulation)hunter.downloadCurrentCsvFiles(hunter.dir_1,hunter.subDir_1, hunter.subDir_2,hunter.sectorsCsvFilePath);
								else
									{
										hunter.calculateStatistical();
										
										PlatformController container = getContainerController();
										try {//TODO
											//log.info("Criando Gertor:"+nameAgentManager);
											// Xms128m
											Object[] argument;
											argument = new Object[1];
											argument[0] = "Xms512m";

											AgentController agentController = container.createNewAgent(
													"Simulator", "core.agents.util.StockAgent", argument);
											agentController.start();

										} catch (Exception e) {
											e.printStackTrace();//TODO
											log.error("Msg:"+e.getMessage()+"Causa:"+e.getCause());
										}
									}
								
								
							}
						} else
						{ //TODO
						//	hunter.log.debug("Iniciando procedimento de downloand de csv com cotacoes");
							hunter.conversations = false;
							System.out.println(hunter.getLocalName()+":Baixar CSV");
							hunter.downloadCsvFiles(hunter.dir_1,hunter.subDir_1, hunter.subDir_2,hunter.sectorsCsvFilePath);
						}
					} catch (Exception e) { //TODO
						e.printStackTrace();
						log.error("Msg:"+e.getMessage()+"Causa:"+e.getCause());
					}
				}
			});
			new SimpleDateFormat("MM/dd/yyyy hh:mma", Locale.US);
			this.date = new Date();
			this.date.setMinutes(date.getMinutes() + 15);
			this.dailyInterval = 1000 * 60 * 60 * 24;
			this.addSubBehaviour(new WakerBehaviour(agent, date) {
				private static final long serialVersionUID = 1L;

				protected void onWake() {// TODO LOG
					System.out.println("Dados serao atualizado no proximo dia "
							+ date.getDate());
					addBehaviour(new TickerBehaviour(hunter, dailyInterval) {
						private static final long serialVersionUID = 1L;

						@Override
						protected void onTick() {
							hunter.downloadCurrentCsvFiles(hunter.dir_1,
									hunter.subDir_1, hunter.subDir_2,
									hunter.sectorsCsvFilePath);
						}
					});
				}
			});
		}
	}

	private class Communication extends CyclicBehaviour {
		private static final long serialVersionUID = 1L;
		private InfoConversations info;

		public Communication(Agent agent) {
			super(agent);
		}

		@Override
		public void action() {
			try {// TODO POR LOG EM TUDO
				ACLMessage messages = myAgent.receive();
				ACLMessage reply = null;
				if (messages != null && !conversations) {
					reply = messages.createReply();
					reply.setPerformative(ACLMessage.REFUSE);
					myAgent.send(reply);
				}
				if (messages != null && conversations) {
					switch (messages.getPerformative()) {
					case ACLMessage.CFP: {
						if (messages.getConversationId() == ConversationsID.STOCKS_HUNTER_SUGGESTIONS) {
							
							System.out.println("->Pedido Recebido");
							ArrayList<Stock> stocksuggestion = null;
							ArrayList<Stock> stockSuggestions_aux = null;
							int lowerLimit = 0;
							int upperLimit = 0;
							info = (InfoConversations) messages
									.getContentObject();
							stocksuggestion = new ArrayList<Stock>();

							switch (info.getUserProfile()) {// TODO LOG
							case CORAJOSO: {
								lowerLimit = 15;
								upperLimit = 30;
								do {
									stockSuggestions_aux = hunter.stockDao
											.getStockOrderByStandardDeviation_30(
													lowerLimit, upperLimit);
									if (lowerLimit > 0)
										lowerLimit--;
									upperLimit++;
									info.setLowerPercent(lowerLimit);
									info.setUpperPercent(upperLimit);
									stocksuggestion = stockSuggestions_aux;
								} while (stocksuggestion.size() < 9);
								info.setStockList(stocksuggestion);
							}
								break;
							case MODERADO: {
								lowerLimit = 5;
								upperLimit = 10;
								do {
									stockSuggestions_aux = hunter.stockDao
											.getStockOrderByStandardDeviation_30(
													lowerLimit, upperLimit);
									if (lowerLimit > 0)
										lowerLimit--;
									upperLimit++;
									info.setLowerPercent(lowerLimit);
									info.setUpperPercent(upperLimit);
									stocksuggestion = stockSuggestions_aux;
								} while (stocksuggestion.size() == 0);
								info.setStockList(stocksuggestion);
							}
								break;
							case CONSERVADOR: {
								if (lowerLimit > 0)
									lowerLimit--;
								upperLimit = 6;
								do {
									stockSuggestions_aux = hunter.stockDao
											.getStockOrderByStandardDeviation_30(
													lowerLimit, upperLimit);
									upperLimit++;
									info.setLowerPercent(lowerLimit);
									info.setUpperPercent(upperLimit);
									stocksuggestion = stockSuggestions_aux;
								} while (stocksuggestion.size() == 0);
								info.setStockList(stocksuggestion);
							}
								break;
							default:
								break;
							}
							reply = messages.createReply();
							reply.setPerformative(ACLMessage.PROPOSE);
							reply.setContentObject(info);
							
							System.out.println("HUNTER RESPONDEU");
							myAgent.send(reply);
						}
					}
						break;
					case ACLMessage.INFORM: {

					}
						break;
					case ACLMessage.REJECT_PROPOSAL: {
						ArrayList<Stock> stocksuggestion = null;
						int lowerLimit = 0;
						int upperLimit = 0;
						if (messages.getConversationId() == ConversationsID.STOCKS_HUNTER_SUGGESTIONS) {
							switch (info.getUserProfile()) {
							case CORAJOSO: {
								lowerLimit = info.getLowerPercent();
								upperLimit = info.getUpperPercent();
								int countLoop = 0;
								do {
									stocksuggestion=null;
									stocksuggestion = hunter.stockDao.getStockOrderByStandardDeviation_30(
													lowerLimit, upperLimit);
									if (lowerLimit > 0)
										lowerLimit--;
									upperLimit++;
									info.setLowerPercent(lowerLimit);
									info.setUpperPercent(upperLimit);
									countLoop++;
									if (countLoop == 20)
										break;
								} while (stocksuggestion.size() < 9);
								info.setStockList(stocksuggestion);
							}
								break;
							case MODERADO: {
								lowerLimit = info.getLowerPercent();
								upperLimit = info.getUpperPercent();
								int countLoop = 0;
								do {
									stocksuggestion=null;
									stocksuggestion = hunter.stockDao
											.getStockOrderByStandardDeviation_30(
													lowerLimit, upperLimit);
									if (lowerLimit > 0)
										lowerLimit--;
									upperLimit++;
									info.setLowerPercent(lowerLimit);
									info.setUpperPercent(upperLimit);
									countLoop++;
									if (countLoop == 20)
										break;
								} while (stocksuggestion.size() == 0);
								info.setStockList(stocksuggestion);
							}
								break;
							case CONSERVADOR: {
								if (lowerLimit > 0)
									lowerLimit--;
								upperLimit = info.getUpperPercent();
								int countLoop = 0;
								do {
									stocksuggestion=null;
									stocksuggestion = hunter.stockDao
											.getStockOrderByStandardDeviation_30(
													lowerLimit, upperLimit);
									upperLimit++;
									info.setLowerPercent(lowerLimit);
									info.setUpperPercent(upperLimit);
									countLoop++;
									if (countLoop == 20)
										break;
								} while (stocksuggestion.size() == 0);
								info.setStockList(stocksuggestion);
							}
								break;
							default:
								break;
							}
							reply = messages.createReply();
							reply.setContentObject(info);
							myAgent.send(reply);
						}
					}
						break;
					default:
						break;
					}
				} else
					block();
			} catch (Exception e) {// TODO LOG
				e.printStackTrace();
			}
		}
	}

private void downloadCurrentCsvFiles(String dir_1, String subdir_1,
			String subdir_2, String sectorsPath) {// TODO LOG
		YahooFinance yahoo = new YahooFinance(dir_1, subdir_1, subdir_2);
		final long ti = System.currentTimeMillis();

		// Criando a lista a ser de acoes para baixar a cotacao
		final ArrayList<Stock> stockList = yahoo.loadStocksFromCsv(sectorsPath);
		/*
		 * A ultima thread vai mudar o atributo conversation para true para isso
		 * eh preciso ter um boolean para cada thread, para indicar que ela
		 * terminou de fazer o download.
		 */
		final boolean thread_finish[] = { false, false, false };
		// Thread 1
		final int id1 = 1;
		Runnable y1 = new YahooFinance(dir_1, subdir_1, subdir_2, stockList) {
			public void run() {
				while (true) {
					String codeName = null;
					synchronized (stockList) {
						if (stockList.size() != 0) {
							codeName = stockList.get(0).getCodeName();
							stockList.remove(0);

						} else {
							try {// TODO LOG
								System.out.println("Thread " + id1
										+ ": Concluido!");
								long t = System.currentTimeMillis();
								System.out.println("\t\t\tTempo total :"
										+ (t - ti));
								// verifica se eh a ultima a terminar o servico
								thread_finish[0] = true;
								if (thread_finish[1] && thread_finish[2]) {
									conversations = true;
									System.out
											.println("Thread 1:Download(Current) concluido");
									hunter.updateDataBase();
								}
								stockList.wait();
							} catch (InterruptedException e) {// TODO LOG
								e.printStackTrace();
							}
						}
					}
					try
					{
						if (codeName != null) 
						{// TODO LOG
							System.out.println("Baixando dados de : " + codeName);
							System.out.println(codeName + "_current :"
									+ storeCsvCurrentPriceStock(codeName));
							System.out.print("\n");
						}
					}catch (Exception e) 
					{
						
					}
					
				}
			}//TODO Dar um jeito nessas threads 
		};
		// Thread 2
		final int id2 = 2;
		Runnable y2 = new YahooFinance(dir_1, subdir_1, subdir_2, stockList) {
			public void run() {
				while (true) {
					String codeName = null;
					synchronized (stockList) {
						if (stockList.size() != 0) {
							codeName = stockList.get(0).getCodeName();
							stockList.remove(0);
						} else {
							try {
								System.out.println("Thread " + id2
										+ ": Concluido!");

								long t = System.currentTimeMillis();
								System.out.println("\t\t\tTempo total :"
										+ (t - ti));
								// verifica se eh a ultima a terminar o servico
								thread_finish[1] = true;
								if (thread_finish[0] && thread_finish[2]) {
									conversations = true;
									System.out
											.println("Thread 2:Download(Current) concluido");
									hunter.updateDataBase();
								}
								stockList.wait();
							} catch (InterruptedException e) {// TODO LOG
																// e.printStackTrace();
							}
						}
					}
					try
					{
						if (codeName != null) 
						{// TODO LOG
							System.out.println("Baixando dados de : " + codeName);
							System.out.println(codeName + "_current :"
									+ storeCsvCurrentPriceStock(codeName));
							System.out.print("\n");
						}
					}catch (Exception e) 
					{
						
					}
				}
			}
		};
		// Thread 3
		final int id3 = 3;
		Runnable y3 = new YahooFinance(dir_1, subdir_1, subdir_2, stockList) {
			public void run() {
				while (true) {
					String codeName = null;
					synchronized (stockList) {
						if (stockList.size() != 0) {
							codeName = stockList.get(0).getCodeName();
							stockList.remove(0);
						} else {
							try {
								System.out.println("Thread " + id3+ ": Concluido!");
								long t = System.currentTimeMillis();
								System.out.println("\t\t\tTempo total :"
										+ (t - ti));
								// verifica se eh a ultima a terminar o servico
								thread_finish[2] = true;
								if (thread_finish[1] && thread_finish[0]) {
									conversations = true;
									System.out.println("Thread 3:Download(Current) concluido");
									hunter.updateDataBase();
								}
								stockList.wait();
							} catch (InterruptedException e) {// TODO LOG
																// e.printStackTrace();
							}
						}
					}
					try
					{
						if (codeName != null) 
						{// TODO LOG
							System.out.println("Baixando dados de : " + codeName);
							System.out.println(codeName + "_current :"+ storeCsvCurrentPriceStock(codeName));
							System.out.print("\n");
						}
					}catch (Exception e) 
					{
						
					}
				}
			}
		};
		Thread t1 = new Thread(y1);
		Thread t2 = new Thread(y2);
		Thread t3 = new Thread(y3);
		t1.start();
		t2.start();
		t3.start();
	}

	/*
	 * Dir 1: "/Users/alissonnunes/Desktop"Sub dir 1: "/Ramon"Sub dir 2 "/Cruz"
	 * SectorsPath "/Users/alissonnunes/Desktop/Setores"
	 */
	private void downloadCsvFiles(String dir_1, String subdir_1,String subdir_2, String sectorsPath) 
	{
		YahooFinance yahoo = new YahooFinance(dir_1, subdir_1, subdir_2);
		final long ti = System.currentTimeMillis();//TODO
	//	hunter.log.debug("Iniciando contagem de tempo e disparando threads");
		
		// Criando a lista a ser de acoes para baixar a cotacao
		final ArrayList<Stock> stockList = yahoo.loadStocksFromCsv(sectorsPath);

		/*
		 * A ultima thread vai mudar o atributo conversation para true para isso
		 * eh preciso ter um boolean para cada thread, para indicar que ela
		 * terminou de fazer o download.
		 */
		final boolean thread_finish[] = { false, false, false };
		// Thread 1
		final int id1 = 1;
		Runnable y1 = new YahooFinance(dir_1, subdir_1, subdir_2, stockList) {
			public void run() {
				while (true) {
					String codeName = null;
					synchronized (stockList) {
						if (stockList.size() != 0) {
							codeName = stockList.get(0).getCodeName();
							stockList.remove(0);
						} else {
							try {//TODO
								hunter.log.debug("Thread " + id1+ ": Concluido!");
								long t = System.currentTimeMillis();
								hunter.log.debug("Tempo total :"+ (t - ti));
								// verifica se eh a ultima a terminar o servico
								thread_finish[0] = true;
								if (thread_finish[1] && thread_finish[2]) {
									conversations = true;
									hunter.log.debug("Thread 1:Download concluido. Iniciar Carga do Banco.");
									hunter.loadDataBase();
								}
								stockList.wait();
							} catch (InterruptedException e) {
								e.printStackTrace();//TODO
								log.error("Msg:"+e.getMessage()+"Causa:"+e.getCause());
							}
						}
					}
					if (codeName != null) {//TODO
						hunter.log.debug("Baixando dados de : " + codeName);
						hunter.log.debug(codeName + "_historical :"+ storeCsvHistoricalPriceStock(codeName));
						hunter.log.debug(codeName + "_current :"+ storeCsvCurrentPriceStock(codeName));
						try
						{
							System.out.println("Baixando dados de : " + codeName);
							storeCsvHistoricalPriceStock(codeName);
							storeCsvCurrentPriceStock(codeName);
						}catch (Exception e) {
							
						}
					}
				}
			}
		};
		// Thread 2
		final int id2 = 2;
		Runnable y2 = new YahooFinance(dir_1, subdir_1, subdir_2, stockList) {
			public void run() {
				while (true) {
					String codeName = null;
					synchronized (stockList) {
						if (stockList.size() != 0) 
						{//TODO
							hunter.log.debug("Baixando dados de : "+ stockList.get(0).getCodeName());
							codeName = stockList.get(0).getCodeName();
							stockList.remove(0);
							
						} else {
							try {//TODO
								hunter.log.debug("Thread " + id2+ ": Concluido!");
								long t = System.currentTimeMillis();
								hunter.log.debug("tempo total :"+ (t - ti));
							
								// verifica se eh a ultima a terminar o servico
								thread_finish[1] = true;
								if (thread_finish[0] && thread_finish[2])
								{//TODO
									conversations = true;
									hunter.log.debug("Thread 2:Download concluido. Iniciar Carga do Banco");
									hunter.loadDataBase();
								}
								stockList.wait();

							} catch (InterruptedException e) 
							{//TODO
								log.error("Msg:"+e.getMessage()+"Causa:"+e.getCause());						// e.printStackTrace();
							}
						}
					}
					if (codeName != null) {//TODO
						hunter.log.debug("Baixando dados de : " + codeName);
						hunter.log.debug(codeName + "_historical :"+ storeCsvHistoricalPriceStock(codeName));
						hunter.log.debug(codeName + "_current :"+ storeCsvCurrentPriceStock(codeName));
						try
						{
							System.out.println("Baixando dados de : " + codeName);
							storeCsvHistoricalPriceStock(codeName);
							storeCsvCurrentPriceStock(codeName);
						}catch (Exception e) {
							
						}
					}
				}
			}
		};
		// Thread 3
		final int id3 = 3;
		Runnable y3 = new YahooFinance(dir_1, subdir_1, subdir_2, stockList) {
			public void run() {
				while (true) {
					String codeName = null;
					synchronized (stockList) { 
						if (stockList.size() != 0)
						{//TODO
							hunter.log.debug("Baixando dados de : "+ stockList.get(0).getCodeName());
							
							codeName = stockList.get(0).getCodeName();
							
							hunter.log.debug("Baixando dados de : "+ stockList.get(0).getCodeName());
							codeName = stockList.get(0).getCodeName();

							stockList.remove(0);
							
						} else {
							try {//TODO
								hunter.log.debug("Thread " + id3+ ": Concluido!");
							
								long t = System.currentTimeMillis();
								hunter.log.debug("Tempo total :"+ (t - ti));
								// verifica se eh a ultima a terminar o servico
								thread_finish[2] = true;
								if (thread_finish[1] && thread_finish[0]) 
								{
									conversations = true;
									hunter.log.debug("Thread 3:Download concluido. Iniciando carga de banco.");
									hunter.loadDataBase();
								}
								stockList.wait();
							} catch (InterruptedException e) {
								log.error("Msg:"+e.getMessage()+"Causa:"+e.getCause());
							}
						}
					}
					if (codeName != null) {//TODO
						hunter.log.debug("Baixando dados de : " + codeName);
						hunter.log.debug(codeName + "_historical :"+ storeCsvHistoricalPriceStock(codeName));
						hunter.log.debug(codeName + "_current :"	+ storeCsvCurrentPriceStock(codeName));
					
						try
						{
							System.out.println("Baixando dados de : " + codeName);
							storeCsvHistoricalPriceStock(codeName);
							storeCsvCurrentPriceStock(codeName);
						}catch (Exception e) {
							
						}
						
			
					}
				}
			}
		};
		//TODO
		hunter.log.debug("Inicializando Threads.");
		Thread t1 = new Thread(y1);
		Thread t2 = new Thread(y2);
		Thread t3 = new Thread(y3);
		t1.start();
		t2.start();
		t3.start();
	}

	// Esse metodo ainda nao funciona bem
	// ele encontra as pastas vazias mas nao as apaga
	@SuppressWarnings("unused")
	private void dropEmptyFolders(File directory) {
		if (directory.exists()) {
			File[] files = directory.listFiles();
			if (files != null) {
				for (int i = 0; i < files.length; i++) {
					if (files[i].isDirectory() && files[i].listFiles() == null) {
						files[i].delete();
					}
				}
			}
		}
	}

	private void updateDataBase() {
		YahooFinance yahooFinance = new YahooFinance(this.dir_1, this.subDir_1,this.subDir_2);
		try {//TODO
			hunter.log.debug("updateDataBase()  stocks:");
			ArrayList<Stock> stockTemp = this.stockList;
			System.out.println(hunter.getLocalName()+":Alualizar "+stockTemp.size()+" Stocks");
			for (int i = 1; i < stockTemp.size(); i++) 
			{
				try {//TODO
					hunter.log.debug(stockTemp.get(i).getCodeName()+ " Atualizado :"+ stockTemp.get(i).addCurrentCandleStick(yahooFinance.getCurrentValue(stockTemp.get(i).getCodeName())));
					System.out.println(stockTemp.get(i).getCodeName()+ " Atualizado :"+ stockTemp.get(i).addCurrentCandleStick(yahooFinance.getCurrentValue(stockTemp.get(i).getCodeName())));
					if (stockTemp.get(i).getCandleSticks().size() > 0) {
						hunter.log.debug(stockTemp.get(i).getCodeName()+ " DB Atuazado? "+ this.stockDao.insertCurrentStock(stockTemp.get(i)));
						System.out.println(stockTemp.get(i).getCodeName()+ " DB Atuazado? "+ this.stockDao.insertCurrentStock(stockTemp.get(i)));
					}
				} catch (Exception e) { 
					//log.error("Msg:"+e.getMessage()+" Causa:"+e.getCause());	
					e.printStackTrace();
				}
			}
			hunter.log.debug("Atualizando dados estatisticos.");
			System.out.println(hunter.getLocalName()+":Atualizando dados estatisticos.");
			hunter.calculateStatistical();
		} catch (Exception e) 
		{//TODO
			log.error("Msg:"+e.getMessage()+"Causa:"+e.getCause());	
			e.printStackTrace();
		}
	}

	private void loadDataBase() {
		YahooFinance yahooFinance;
		this.stockList = new ArrayList<Stock>();
		int countStocks = 0;
		int countCandleSticks = 0;
		
		try
		{ 
			yahooFinance = new YahooFinance(this.dir_1, this.subDir_1,this.subDir_2);
			ArrayList<Stock> stocksFromCsv = yahooFinance.loadStocksFromCsv(this.sectorsCsvFilePath);
			System.out.println("Setores =:"+this.sectorsCsvFilePath);
			if(stocksFromCsv!=null)
			{
				for (Stock s : stocksFromCsv) 
				{
					s.setCandleSticks(yahooFinance.getHistoricalValue(s.getCodeName()));//TODO
					hunter.log.debug(s.getCodeName() + " Carregado com "+ s.getCandleSticks().size() + " Valores");
					if (s.getCandleSticks().size() > 0) 
					{
						this.stockDao.storeHistoricalStockValue(s);
						countCandleSticks += s.getCandleSticks().size();
						countStocks++;
						this.stockList.add(s);
					}
				}//TODO
				hunter.log.debug(countStocks + " Acoes persistidas com sucesso !");
				hunter.log.debug( this.stockList.size() + "Acoes em memoria");
				hunter.log.debug("Total de CandleSticks: " + countCandleSticks);
				hunter.log.debug("Iniciando calculo de valores estatisticos para catalogar");
				
				hunter.calculateStatistical();
			}
		}catch (Exception e) {
			
		}
		
		
	}


	private void calculateStatistical() 
	{
		
		this.conversations = false;
		for (Stock s : this.stockList) 
		{//TODO 
			
			hunter.log.debug("Calculando valores estatiscos para "+ s.getCodeName());
			System.out.println("Calculando valores estatiscos para "+ s.getCodeName());
			s.setAvarangeReturn_15(this.statistical.averangeReturn_15(s.getCandleSticks()));
			s.setAvarangeReturn_30(this.statistical.averangeReturn_30(s.getCandleSticks()));
			s.setStandardDeviation_15(this.statistical.calculeStandardDeviation_15(s.getCandleSticks()));
			s.setStandardDeviation_30(this.statistical.calculeStandardDeviation_30(s.getCandleSticks()));
			s.setVariance_15(this.statistical.calculeVariance_15(s.getCandleSticks()));
			s.setVariance_30(this.statistical.calculeVariance_30(s.getCandleSticks()));
			s.setVarianceCoefficient_15(this.statistical.calculeVariance_15(s.getCandleSticks()));
			s.setVarianceCoefficient_30(this.statistical.calculeVariance_30(s.getCandleSticks()));
			this.hunter.stockDao.updateStock(s);
		}

		this.conversations = true;//TODO
		hunter.log.debug("Calculos concluidos! ");
		
		System.out.println(hunter.getLocalName()+": Calculos concuidos!");
	}

	@SuppressWarnings("unused")
	private void stocksSorted(double lowerLimit, double upperLimit) {// TODO LOG
		System.out.println("Stock Sorted by Standard Deviation 30 "
				+ this.stockDao.getStockOrderByStandardDeviation_30(lowerLimit,upperLimit).size());
		for (Stock s : this.stockDao.getStockOrderByStandardDeviation_30(lowerLimit, upperLimit)) 
		{
			System.out.println(s.getCodeName());
			System.out.println("Standard Deviation 30: "+ s.getStandardDeviation_30());
		}
	}
}
